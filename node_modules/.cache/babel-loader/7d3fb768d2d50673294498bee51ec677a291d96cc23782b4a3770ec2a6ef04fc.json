{"ast":null,"code":"import { CHANNEL_EVENTS, CHANNEL_STATES, MAX_PUSH_BUFFER_SIZE } from './lib/constants';\nimport Push from './lib/push';\nimport Timer from './lib/timer';\nimport RealtimePresence from './RealtimePresence';\nimport * as Transformers from './lib/transformers';\nimport { httpEndpointURL } from './lib/transformers';\nexport var REALTIME_POSTGRES_CHANGES_LISTEN_EVENT;\n(function (REALTIME_POSTGRES_CHANGES_LISTEN_EVENT) {\n  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"ALL\"] = \"*\";\n  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"INSERT\"] = \"INSERT\";\n  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"UPDATE\"] = \"UPDATE\";\n  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"DELETE\"] = \"DELETE\";\n})(REALTIME_POSTGRES_CHANGES_LISTEN_EVENT || (REALTIME_POSTGRES_CHANGES_LISTEN_EVENT = {}));\nexport var REALTIME_LISTEN_TYPES;\n(function (REALTIME_LISTEN_TYPES) {\n  REALTIME_LISTEN_TYPES[\"BROADCAST\"] = \"broadcast\";\n  REALTIME_LISTEN_TYPES[\"PRESENCE\"] = \"presence\";\n  REALTIME_LISTEN_TYPES[\"POSTGRES_CHANGES\"] = \"postgres_changes\";\n  REALTIME_LISTEN_TYPES[\"SYSTEM\"] = \"system\";\n})(REALTIME_LISTEN_TYPES || (REALTIME_LISTEN_TYPES = {}));\nexport var REALTIME_SUBSCRIBE_STATES;\n(function (REALTIME_SUBSCRIBE_STATES) {\n  REALTIME_SUBSCRIBE_STATES[\"SUBSCRIBED\"] = \"SUBSCRIBED\";\n  REALTIME_SUBSCRIBE_STATES[\"TIMED_OUT\"] = \"TIMED_OUT\";\n  REALTIME_SUBSCRIBE_STATES[\"CLOSED\"] = \"CLOSED\";\n  REALTIME_SUBSCRIBE_STATES[\"CHANNEL_ERROR\"] = \"CHANNEL_ERROR\";\n})(REALTIME_SUBSCRIBE_STATES || (REALTIME_SUBSCRIBE_STATES = {}));\nexport const REALTIME_CHANNEL_STATES = CHANNEL_STATES;\n/** A channel is the basic building block of Realtime\r\n * and narrows the scope of data flow to subscribed clients.\r\n * You can think of a channel as a chatroom where participants are able to see who's online\r\n * and send and receive messages.\r\n */\nexport default class RealtimeChannel {\n  constructor(/** Topic name can be any string. */\n  topic, params = {\n    config: {}\n  }, socket) {\n    this.topic = topic;\n    this.params = params;\n    this.socket = socket;\n    this.bindings = {};\n    this.state = CHANNEL_STATES.closed;\n    this.joinedOnce = false;\n    this.pushBuffer = [];\n    this.subTopic = topic.replace(/^realtime:/i, '');\n    this.params.config = Object.assign({\n      broadcast: {\n        ack: false,\n        self: false\n      },\n      presence: {\n        key: '',\n        enabled: false\n      },\n      private: false\n    }, params.config);\n    this.timeout = this.socket.timeout;\n    this.joinPush = new Push(this, CHANNEL_EVENTS.join, this.params, this.timeout);\n    this.rejoinTimer = new Timer(() => this._rejoinUntilConnected(), this.socket.reconnectAfterMs);\n    this.joinPush.receive('ok', () => {\n      this.state = CHANNEL_STATES.joined;\n      this.rejoinTimer.reset();\n      this.pushBuffer.forEach(pushEvent => pushEvent.send());\n      this.pushBuffer = [];\n    });\n    this._onClose(() => {\n      this.rejoinTimer.reset();\n      this.socket.log('channel', `close ${this.topic} ${this._joinRef()}`);\n      this.state = CHANNEL_STATES.closed;\n      this.socket._remove(this);\n    });\n    this._onError(reason => {\n      if (this._isLeaving() || this._isClosed()) {\n        return;\n      }\n      this.socket.log('channel', `error ${this.topic}`, reason);\n      this.state = CHANNEL_STATES.errored;\n      this.rejoinTimer.scheduleTimeout();\n    });\n    this.joinPush.receive('timeout', () => {\n      if (!this._isJoining()) {\n        return;\n      }\n      this.socket.log('channel', `timeout ${this.topic}`, this.joinPush.timeout);\n      this.state = CHANNEL_STATES.errored;\n      this.rejoinTimer.scheduleTimeout();\n    });\n    this.joinPush.receive('error', reason => {\n      if (this._isLeaving() || this._isClosed()) {\n        return;\n      }\n      this.socket.log('channel', `error ${this.topic}`, reason);\n      this.state = CHANNEL_STATES.errored;\n      this.rejoinTimer.scheduleTimeout();\n    });\n    this._on(CHANNEL_EVENTS.reply, {}, (payload, ref) => {\n      this._trigger(this._replyEventName(ref), payload);\n    });\n    this.presence = new RealtimePresence(this);\n    this.broadcastEndpointURL = httpEndpointURL(this.socket.endPoint);\n    this.private = this.params.config.private || false;\n  }\n  /** Subscribe registers your client with the server */\n  subscribe(callback, timeout = this.timeout) {\n    var _a, _b, _c;\n    if (!this.socket.isConnected()) {\n      this.socket.connect();\n    }\n    if (this.state == CHANNEL_STATES.closed) {\n      const {\n        config: {\n          broadcast,\n          presence,\n          private: isPrivate\n        }\n      } = this.params;\n      const postgres_changes = (_b = (_a = this.bindings.postgres_changes) === null || _a === void 0 ? void 0 : _a.map(r => r.filter)) !== null && _b !== void 0 ? _b : [];\n      const presence_enabled = !!this.bindings[REALTIME_LISTEN_TYPES.PRESENCE] && this.bindings[REALTIME_LISTEN_TYPES.PRESENCE].length > 0 || ((_c = this.params.config.presence) === null || _c === void 0 ? void 0 : _c.enabled) === true;\n      const accessTokenPayload = {};\n      const config = {\n        broadcast,\n        presence: Object.assign(Object.assign({}, presence), {\n          enabled: presence_enabled\n        }),\n        postgres_changes,\n        private: isPrivate\n      };\n      if (this.socket.accessTokenValue) {\n        accessTokenPayload.access_token = this.socket.accessTokenValue;\n      }\n      this._onError(e => callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.CHANNEL_ERROR, e));\n      this._onClose(() => callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.CLOSED));\n      this.updateJoinPayload(Object.assign({\n        config\n      }, accessTokenPayload));\n      this.joinedOnce = true;\n      this._rejoin(timeout);\n      this.joinPush.receive('ok', async ({\n        postgres_changes\n      }) => {\n        var _a;\n        this.socket.setAuth();\n        if (postgres_changes === undefined) {\n          callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.SUBSCRIBED);\n          return;\n        } else {\n          const clientPostgresBindings = this.bindings.postgres_changes;\n          const bindingsLen = (_a = clientPostgresBindings === null || clientPostgresBindings === void 0 ? void 0 : clientPostgresBindings.length) !== null && _a !== void 0 ? _a : 0;\n          const newPostgresBindings = [];\n          for (let i = 0; i < bindingsLen; i++) {\n            const clientPostgresBinding = clientPostgresBindings[i];\n            const {\n              filter: {\n                event,\n                schema,\n                table,\n                filter\n              }\n            } = clientPostgresBinding;\n            const serverPostgresFilter = postgres_changes && postgres_changes[i];\n            if (serverPostgresFilter && serverPostgresFilter.event === event && serverPostgresFilter.schema === schema && serverPostgresFilter.table === table && serverPostgresFilter.filter === filter) {\n              newPostgresBindings.push(Object.assign(Object.assign({}, clientPostgresBinding), {\n                id: serverPostgresFilter.id\n              }));\n            } else {\n              this.unsubscribe();\n              this.state = CHANNEL_STATES.errored;\n              callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.CHANNEL_ERROR, new Error('mismatch between server and client bindings for postgres changes'));\n              return;\n            }\n          }\n          this.bindings.postgres_changes = newPostgresBindings;\n          callback && callback(REALTIME_SUBSCRIBE_STATES.SUBSCRIBED);\n          return;\n        }\n      }).receive('error', error => {\n        this.state = CHANNEL_STATES.errored;\n        callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.CHANNEL_ERROR, new Error(JSON.stringify(Object.values(error).join(', ') || 'error')));\n        return;\n      }).receive('timeout', () => {\n        callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.TIMED_OUT);\n        return;\n      });\n    }\n    return this;\n  }\n  presenceState() {\n    return this.presence.state;\n  }\n  async track(payload, opts = {}) {\n    return await this.send({\n      type: 'presence',\n      event: 'track',\n      payload\n    }, opts.timeout || this.timeout);\n  }\n  async untrack(opts = {}) {\n    return await this.send({\n      type: 'presence',\n      event: 'untrack'\n    }, opts);\n  }\n  on(type, filter, callback) {\n    if (this.state === CHANNEL_STATES.joined && type === REALTIME_LISTEN_TYPES.PRESENCE) {\n      this.socket.log('channel', `resubscribe to ${this.topic} due to change in presence callbacks on joined channel`);\n      this.unsubscribe().then(() => this.subscribe());\n    }\n    return this._on(type, filter, callback);\n  }\n  /**\r\n   * Sends a message into the channel.\r\n   *\r\n   * @param args Arguments to send to channel\r\n   * @param args.type The type of event to send\r\n   * @param args.event The name of the event being sent\r\n   * @param args.payload Payload to be sent\r\n   * @param opts Options to be used during the send process\r\n   */\n  async send(args, opts = {}) {\n    var _a, _b;\n    if (!this._canPush() && args.type === 'broadcast') {\n      const {\n        event,\n        payload: endpoint_payload\n      } = args;\n      const authorization = this.socket.accessTokenValue ? `Bearer ${this.socket.accessTokenValue}` : '';\n      const options = {\n        method: 'POST',\n        headers: {\n          Authorization: authorization,\n          apikey: this.socket.apiKey ? this.socket.apiKey : '',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          messages: [{\n            topic: this.subTopic,\n            event,\n            payload: endpoint_payload,\n            private: this.private\n          }]\n        })\n      };\n      try {\n        const response = await this._fetchWithTimeout(this.broadcastEndpointURL, options, (_a = opts.timeout) !== null && _a !== void 0 ? _a : this.timeout);\n        await ((_b = response.body) === null || _b === void 0 ? void 0 : _b.cancel());\n        return response.ok ? 'ok' : 'error';\n      } catch (error) {\n        if (error.name === 'AbortError') {\n          return 'timed out';\n        } else {\n          return 'error';\n        }\n      }\n    } else {\n      return new Promise(resolve => {\n        var _a, _b, _c;\n        const push = this._push(args.type, args, opts.timeout || this.timeout);\n        if (args.type === 'broadcast' && !((_c = (_b = (_a = this.params) === null || _a === void 0 ? void 0 : _a.config) === null || _b === void 0 ? void 0 : _b.broadcast) === null || _c === void 0 ? void 0 : _c.ack)) {\n          resolve('ok');\n        }\n        push.receive('ok', () => resolve('ok'));\n        push.receive('error', () => resolve('error'));\n        push.receive('timeout', () => resolve('timed out'));\n      });\n    }\n  }\n  updateJoinPayload(payload) {\n    this.joinPush.updatePayload(payload);\n  }\n  /**\r\n   * Leaves the channel.\r\n   *\r\n   * Unsubscribes from server events, and instructs channel to terminate on server.\r\n   * Triggers onClose() hooks.\r\n   *\r\n   * To receive leave acknowledgements, use the a `receive` hook to bind to the server ack, ie:\r\n   * channel.unsubscribe().receive(\"ok\", () => alert(\"left!\") )\r\n   */\n  unsubscribe(timeout = this.timeout) {\n    this.state = CHANNEL_STATES.leaving;\n    const onClose = () => {\n      this.socket.log('channel', `leave ${this.topic}`);\n      this._trigger(CHANNEL_EVENTS.close, 'leave', this._joinRef());\n    };\n    this.joinPush.destroy();\n    let leavePush = null;\n    return new Promise(resolve => {\n      leavePush = new Push(this, CHANNEL_EVENTS.leave, {}, timeout);\n      leavePush.receive('ok', () => {\n        onClose();\n        resolve('ok');\n      }).receive('timeout', () => {\n        onClose();\n        resolve('timed out');\n      }).receive('error', () => {\n        resolve('error');\n      });\n      leavePush.send();\n      if (!this._canPush()) {\n        leavePush.trigger('ok', {});\n      }\n    }).finally(() => {\n      leavePush === null || leavePush === void 0 ? void 0 : leavePush.destroy();\n    });\n  }\n  /**\r\n   * Teardown the channel.\r\n   *\r\n   * Destroys and stops related timers.\r\n   */\n  teardown() {\n    this.pushBuffer.forEach(push => push.destroy());\n    this.pushBuffer = [];\n    this.rejoinTimer.reset();\n    this.joinPush.destroy();\n    this.state = CHANNEL_STATES.closed;\n    this.bindings = {};\n  }\n  /** @internal */\n  async _fetchWithTimeout(url, options, timeout) {\n    const controller = new AbortController();\n    const id = setTimeout(() => controller.abort(), timeout);\n    const response = await this.socket.fetch(url, Object.assign(Object.assign({}, options), {\n      signal: controller.signal\n    }));\n    clearTimeout(id);\n    return response;\n  }\n  /** @internal */\n  _push(event, payload, timeout = this.timeout) {\n    if (!this.joinedOnce) {\n      throw `tried to push '${event}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`;\n    }\n    let pushEvent = new Push(this, event, payload, timeout);\n    if (this._canPush()) {\n      pushEvent.send();\n    } else {\n      this._addToPushBuffer(pushEvent);\n    }\n    return pushEvent;\n  }\n  /** @internal */\n  _addToPushBuffer(pushEvent) {\n    pushEvent.startTimeout();\n    this.pushBuffer.push(pushEvent);\n    // Enforce buffer size limit\n    if (this.pushBuffer.length > MAX_PUSH_BUFFER_SIZE) {\n      const removedPush = this.pushBuffer.shift();\n      if (removedPush) {\n        removedPush.destroy();\n        this.socket.log('channel', `discarded push due to buffer overflow: ${removedPush.event}`, removedPush.payload);\n      }\n    }\n  }\n  /**\r\n   * Overridable message hook\r\n   *\r\n   * Receives all events for specialized message handling before dispatching to the channel callbacks.\r\n   * Must return the payload, modified or unmodified.\r\n   *\r\n   * @internal\r\n   */\n  _onMessage(_event, payload, _ref) {\n    return payload;\n  }\n  /** @internal */\n  _isMember(topic) {\n    return this.topic === topic;\n  }\n  /** @internal */\n  _joinRef() {\n    return this.joinPush.ref;\n  }\n  /** @internal */\n  _trigger(type, payload, ref) {\n    var _a, _b;\n    const typeLower = type.toLocaleLowerCase();\n    const {\n      close,\n      error,\n      leave,\n      join\n    } = CHANNEL_EVENTS;\n    const events = [close, error, leave, join];\n    if (ref && events.indexOf(typeLower) >= 0 && ref !== this._joinRef()) {\n      return;\n    }\n    let handledPayload = this._onMessage(typeLower, payload, ref);\n    if (payload && !handledPayload) {\n      throw 'channel onMessage callbacks must return the payload, modified or unmodified';\n    }\n    if (['insert', 'update', 'delete'].includes(typeLower)) {\n      (_a = this.bindings.postgres_changes) === null || _a === void 0 ? void 0 : _a.filter(bind => {\n        var _a, _b, _c;\n        return ((_a = bind.filter) === null || _a === void 0 ? void 0 : _a.event) === '*' || ((_c = (_b = bind.filter) === null || _b === void 0 ? void 0 : _b.event) === null || _c === void 0 ? void 0 : _c.toLocaleLowerCase()) === typeLower;\n      }).map(bind => bind.callback(handledPayload, ref));\n    } else {\n      (_b = this.bindings[typeLower]) === null || _b === void 0 ? void 0 : _b.filter(bind => {\n        var _a, _b, _c, _d, _e, _f;\n        if (['broadcast', 'presence', 'postgres_changes'].includes(typeLower)) {\n          if ('id' in bind) {\n            const bindId = bind.id;\n            const bindEvent = (_a = bind.filter) === null || _a === void 0 ? void 0 : _a.event;\n            return bindId && ((_b = payload.ids) === null || _b === void 0 ? void 0 : _b.includes(bindId)) && (bindEvent === '*' || (bindEvent === null || bindEvent === void 0 ? void 0 : bindEvent.toLocaleLowerCase()) === ((_c = payload.data) === null || _c === void 0 ? void 0 : _c.type.toLocaleLowerCase()));\n          } else {\n            const bindEvent = (_e = (_d = bind === null || bind === void 0 ? void 0 : bind.filter) === null || _d === void 0 ? void 0 : _d.event) === null || _e === void 0 ? void 0 : _e.toLocaleLowerCase();\n            return bindEvent === '*' || bindEvent === ((_f = payload === null || payload === void 0 ? void 0 : payload.event) === null || _f === void 0 ? void 0 : _f.toLocaleLowerCase());\n          }\n        } else {\n          return bind.type.toLocaleLowerCase() === typeLower;\n        }\n      }).map(bind => {\n        if (typeof handledPayload === 'object' && 'ids' in handledPayload) {\n          const postgresChanges = handledPayload.data;\n          const {\n            schema,\n            table,\n            commit_timestamp,\n            type,\n            errors\n          } = postgresChanges;\n          const enrichedPayload = {\n            schema: schema,\n            table: table,\n            commit_timestamp: commit_timestamp,\n            eventType: type,\n            new: {},\n            old: {},\n            errors: errors\n          };\n          handledPayload = Object.assign(Object.assign({}, enrichedPayload), this._getPayloadRecords(postgresChanges));\n        }\n        bind.callback(handledPayload, ref);\n      });\n    }\n  }\n  /** @internal */\n  _isClosed() {\n    return this.state === CHANNEL_STATES.closed;\n  }\n  /** @internal */\n  _isJoined() {\n    return this.state === CHANNEL_STATES.joined;\n  }\n  /** @internal */\n  _isJoining() {\n    return this.state === CHANNEL_STATES.joining;\n  }\n  /** @internal */\n  _isLeaving() {\n    return this.state === CHANNEL_STATES.leaving;\n  }\n  /** @internal */\n  _replyEventName(ref) {\n    return `chan_reply_${ref}`;\n  }\n  /** @internal */\n  _on(type, filter, callback) {\n    const typeLower = type.toLocaleLowerCase();\n    const binding = {\n      type: typeLower,\n      filter: filter,\n      callback: callback\n    };\n    if (this.bindings[typeLower]) {\n      this.bindings[typeLower].push(binding);\n    } else {\n      this.bindings[typeLower] = [binding];\n    }\n    return this;\n  }\n  /** @internal */\n  _off(type, filter) {\n    const typeLower = type.toLocaleLowerCase();\n    if (this.bindings[typeLower]) {\n      this.bindings[typeLower] = this.bindings[typeLower].filter(bind => {\n        var _a;\n        return !(((_a = bind.type) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase()) === typeLower && RealtimeChannel.isEqual(bind.filter, filter));\n      });\n    }\n    return this;\n  }\n  /** @internal */\n  static isEqual(obj1, obj2) {\n    if (Object.keys(obj1).length !== Object.keys(obj2).length) {\n      return false;\n    }\n    for (const k in obj1) {\n      if (obj1[k] !== obj2[k]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /** @internal */\n  _rejoinUntilConnected() {\n    this.rejoinTimer.scheduleTimeout();\n    if (this.socket.isConnected()) {\n      this._rejoin();\n    }\n  }\n  /**\r\n   * Registers a callback that will be executed when the channel closes.\r\n   *\r\n   * @internal\r\n   */\n  _onClose(callback) {\n    this._on(CHANNEL_EVENTS.close, {}, callback);\n  }\n  /**\r\n   * Registers a callback that will be executed when the channel encounteres an error.\r\n   *\r\n   * @internal\r\n   */\n  _onError(callback) {\n    this._on(CHANNEL_EVENTS.error, {}, reason => callback(reason));\n  }\n  /**\r\n   * Returns `true` if the socket is connected and the channel has been joined.\r\n   *\r\n   * @internal\r\n   */\n  _canPush() {\n    return this.socket.isConnected() && this._isJoined();\n  }\n  /** @internal */\n  _rejoin(timeout = this.timeout) {\n    if (this._isLeaving()) {\n      return;\n    }\n    this.socket._leaveOpenTopic(this.topic);\n    this.state = CHANNEL_STATES.joining;\n    this.joinPush.resend(timeout);\n  }\n  /** @internal */\n  _getPayloadRecords(payload) {\n    const records = {\n      new: {},\n      old: {}\n    };\n    if (payload.type === 'INSERT' || payload.type === 'UPDATE') {\n      records.new = Transformers.convertChangeData(payload.columns, payload.record);\n    }\n    if (payload.type === 'UPDATE' || payload.type === 'DELETE') {\n      records.old = Transformers.convertChangeData(payload.columns, payload.old_record);\n    }\n    return records;\n  }\n}","map":{"version":3,"names":["CHANNEL_EVENTS","CHANNEL_STATES","MAX_PUSH_BUFFER_SIZE","Push","Timer","RealtimePresence","Transformers","httpEndpointURL","REALTIME_POSTGRES_CHANGES_LISTEN_EVENT","REALTIME_LISTEN_TYPES","REALTIME_SUBSCRIBE_STATES","REALTIME_CHANNEL_STATES","RealtimeChannel","constructor","topic","params","config","socket","bindings","state","closed","joinedOnce","pushBuffer","subTopic","replace","Object","assign","broadcast","ack","self","presence","key","enabled","private","timeout","joinPush","join","rejoinTimer","_rejoinUntilConnected","reconnectAfterMs","receive","joined","reset","forEach","pushEvent","send","_onClose","log","_joinRef","_remove","_onError","reason","_isLeaving","_isClosed","errored","scheduleTimeout","_isJoining","_on","reply","payload","ref","_trigger","_replyEventName","broadcastEndpointURL","endPoint","subscribe","callback","isConnected","connect","isPrivate","postgres_changes","_b","_a","map","r","filter","presence_enabled","PRESENCE","length","_c","accessTokenPayload","accessTokenValue","access_token","e","CHANNEL_ERROR","CLOSED","updateJoinPayload","_rejoin","setAuth","undefined","SUBSCRIBED","clientPostgresBindings","bindingsLen","newPostgresBindings","i","clientPostgresBinding","event","schema","table","serverPostgresFilter","push","id","unsubscribe","Error","error","JSON","stringify","values","TIMED_OUT","presenceState","track","opts","type","untrack","on","then","args","_canPush","endpoint_payload","authorization","options","method","headers","Authorization","apikey","apiKey","body","messages","response","_fetchWithTimeout","cancel","ok","name","Promise","resolve","_push","updatePayload","leaving","onClose","close","destroy","leavePush","leave","trigger","finally","teardown","url","controller","AbortController","setTimeout","abort","fetch","signal","clearTimeout","_addToPushBuffer","startTimeout","removedPush","shift","_onMessage","_event","_ref","_isMember","typeLower","toLocaleLowerCase","events","indexOf","handledPayload","includes","bind","bindId","bindEvent","ids","data","_e","_d","_f","postgresChanges","commit_timestamp","errors","enrichedPayload","eventType","new","old","_getPayloadRecords","_isJoined","joining","binding","_off","isEqual","obj1","obj2","keys","k","_leaveOpenTopic","resend","records","convertChangeData","columns","record","old_record"],"sources":["C:\\projects\\cidika-travel\\node_modules\\@supabase\\realtime-js\\src\\RealtimeChannel.ts"],"sourcesContent":["import {\r\n  CHANNEL_EVENTS,\r\n  CHANNEL_STATES,\r\n  MAX_PUSH_BUFFER_SIZE,\r\n} from './lib/constants'\r\nimport Push from './lib/push'\r\nimport type RealtimeClient from './RealtimeClient'\r\nimport Timer from './lib/timer'\r\nimport RealtimePresence, {\r\n  REALTIME_PRESENCE_LISTEN_EVENTS,\r\n} from './RealtimePresence'\r\nimport type {\r\n  RealtimePresenceJoinPayload,\r\n  RealtimePresenceLeavePayload,\r\n  RealtimePresenceState,\r\n} from './RealtimePresence'\r\nimport * as Transformers from './lib/transformers'\r\nimport { httpEndpointURL } from './lib/transformers'\r\n\r\nexport type RealtimeChannelOptions = {\r\n  config: {\r\n    /**\r\n     * self option enables client to receive message it broadcast\r\n     * ack option instructs server to acknowledge that broadcast message was received\r\n     */\r\n    broadcast?: { self?: boolean; ack?: boolean }\r\n    /**\r\n     * key option is used to track presence payload across clients\r\n     */\r\n    presence?: { key?: string; enabled?: boolean }\r\n    /**\r\n     * defines if the channel is private or not and if RLS policies will be used to check data\r\n     */\r\n    private?: boolean\r\n  }\r\n}\r\n\r\ntype RealtimePostgresChangesPayloadBase = {\r\n  schema: string\r\n  table: string\r\n  commit_timestamp: string\r\n  errors: string[]\r\n}\r\n\r\nexport type RealtimePostgresInsertPayload<T extends { [key: string]: any }> =\r\n  RealtimePostgresChangesPayloadBase & {\r\n    eventType: `${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.INSERT}`\r\n    new: T\r\n    old: {}\r\n  }\r\n\r\nexport type RealtimePostgresUpdatePayload<T extends { [key: string]: any }> =\r\n  RealtimePostgresChangesPayloadBase & {\r\n    eventType: `${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.UPDATE}`\r\n    new: T\r\n    old: Partial<T>\r\n  }\r\n\r\nexport type RealtimePostgresDeletePayload<T extends { [key: string]: any }> =\r\n  RealtimePostgresChangesPayloadBase & {\r\n    eventType: `${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.DELETE}`\r\n    new: {}\r\n    old: Partial<T>\r\n  }\r\n\r\nexport type RealtimePostgresChangesPayload<T extends { [key: string]: any }> =\r\n  | RealtimePostgresInsertPayload<T>\r\n  | RealtimePostgresUpdatePayload<T>\r\n  | RealtimePostgresDeletePayload<T>\r\n\r\nexport type RealtimePostgresChangesFilter<\r\n  T extends `${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT}`\r\n> = {\r\n  /**\r\n   * The type of database change to listen to.\r\n   */\r\n  event: T\r\n  /**\r\n   * The database schema to listen to.\r\n   */\r\n  schema: string\r\n  /**\r\n   * The database table to listen to.\r\n   */\r\n  table?: string\r\n  /**\r\n   * Receive database changes when filter is matched.\r\n   */\r\n  filter?: string\r\n}\r\n\r\nexport type RealtimeChannelSendResponse = 'ok' | 'timed out' | 'error'\r\n\r\nexport enum REALTIME_POSTGRES_CHANGES_LISTEN_EVENT {\r\n  ALL = '*',\r\n  INSERT = 'INSERT',\r\n  UPDATE = 'UPDATE',\r\n  DELETE = 'DELETE',\r\n}\r\n\r\nexport enum REALTIME_LISTEN_TYPES {\r\n  BROADCAST = 'broadcast',\r\n  PRESENCE = 'presence',\r\n  POSTGRES_CHANGES = 'postgres_changes',\r\n  SYSTEM = 'system',\r\n}\r\n\r\nexport enum REALTIME_SUBSCRIBE_STATES {\r\n  SUBSCRIBED = 'SUBSCRIBED',\r\n  TIMED_OUT = 'TIMED_OUT',\r\n  CLOSED = 'CLOSED',\r\n  CHANNEL_ERROR = 'CHANNEL_ERROR',\r\n}\r\n\r\nexport const REALTIME_CHANNEL_STATES = CHANNEL_STATES\r\n\r\ninterface PostgresChangesFilters {\r\n  postgres_changes: {\r\n    id: string\r\n    event: string\r\n    schema?: string\r\n    table?: string\r\n    filter?: string\r\n  }[]\r\n}\r\n/** A channel is the basic building block of Realtime\r\n * and narrows the scope of data flow to subscribed clients.\r\n * You can think of a channel as a chatroom where participants are able to see who's online\r\n * and send and receive messages.\r\n */\r\nexport default class RealtimeChannel {\r\n  bindings: {\r\n    [key: string]: {\r\n      type: string\r\n      filter: { [key: string]: any }\r\n      callback: Function\r\n      id?: string\r\n    }[]\r\n  } = {}\r\n  timeout: number\r\n  state: CHANNEL_STATES = CHANNEL_STATES.closed\r\n  joinedOnce = false\r\n  joinPush: Push\r\n  rejoinTimer: Timer\r\n  pushBuffer: Push[] = []\r\n  presence: RealtimePresence\r\n  broadcastEndpointURL: string\r\n  subTopic: string\r\n  private: boolean\r\n\r\n  constructor(\r\n    /** Topic name can be any string. */\r\n    public topic: string,\r\n    public params: RealtimeChannelOptions = { config: {} },\r\n    public socket: RealtimeClient\r\n  ) {\r\n    this.subTopic = topic.replace(/^realtime:/i, '')\r\n    this.params.config = {\r\n      ...{\r\n        broadcast: { ack: false, self: false },\r\n        presence: { key: '', enabled: false },\r\n        private: false,\r\n      },\r\n      ...params.config,\r\n    }\r\n    this.timeout = this.socket.timeout\r\n    this.joinPush = new Push(\r\n      this,\r\n      CHANNEL_EVENTS.join,\r\n      this.params,\r\n      this.timeout\r\n    )\r\n    this.rejoinTimer = new Timer(\r\n      () => this._rejoinUntilConnected(),\r\n      this.socket.reconnectAfterMs\r\n    )\r\n    this.joinPush.receive('ok', () => {\r\n      this.state = CHANNEL_STATES.joined\r\n      this.rejoinTimer.reset()\r\n      this.pushBuffer.forEach((pushEvent: Push) => pushEvent.send())\r\n      this.pushBuffer = []\r\n    })\r\n    this._onClose(() => {\r\n      this.rejoinTimer.reset()\r\n      this.socket.log('channel', `close ${this.topic} ${this._joinRef()}`)\r\n      this.state = CHANNEL_STATES.closed\r\n      this.socket._remove(this)\r\n    })\r\n    this._onError((reason: string) => {\r\n      if (this._isLeaving() || this._isClosed()) {\r\n        return\r\n      }\r\n      this.socket.log('channel', `error ${this.topic}`, reason)\r\n      this.state = CHANNEL_STATES.errored\r\n      this.rejoinTimer.scheduleTimeout()\r\n    })\r\n    this.joinPush.receive('timeout', () => {\r\n      if (!this._isJoining()) {\r\n        return\r\n      }\r\n      this.socket.log('channel', `timeout ${this.topic}`, this.joinPush.timeout)\r\n      this.state = CHANNEL_STATES.errored\r\n      this.rejoinTimer.scheduleTimeout()\r\n    })\r\n\r\n    this.joinPush.receive('error', (reason: any) => {\r\n      if (this._isLeaving() || this._isClosed()) {\r\n        return\r\n      }\r\n      this.socket.log('channel', `error ${this.topic}`, reason)\r\n      this.state = CHANNEL_STATES.errored\r\n      this.rejoinTimer.scheduleTimeout()\r\n    })\r\n    this._on(CHANNEL_EVENTS.reply, {}, (payload: any, ref: string) => {\r\n      this._trigger(this._replyEventName(ref), payload)\r\n    })\r\n\r\n    this.presence = new RealtimePresence(this)\r\n\r\n    this.broadcastEndpointURL = httpEndpointURL(this.socket.endPoint)\r\n    this.private = this.params.config.private || false\r\n  }\r\n\r\n  /** Subscribe registers your client with the server */\r\n  subscribe(\r\n    callback?: (status: REALTIME_SUBSCRIBE_STATES, err?: Error) => void,\r\n    timeout = this.timeout\r\n  ): RealtimeChannel {\r\n    if (!this.socket.isConnected()) {\r\n      this.socket.connect()\r\n    }\r\n    if (this.state == CHANNEL_STATES.closed) {\r\n      const {\r\n        config: { broadcast, presence, private: isPrivate },\r\n      } = this.params\r\n\r\n      const postgres_changes =\r\n        this.bindings.postgres_changes?.map((r) => r.filter) ?? []\r\n\r\n      const presence_enabled =\r\n        (!!this.bindings[REALTIME_LISTEN_TYPES.PRESENCE] &&\r\n          this.bindings[REALTIME_LISTEN_TYPES.PRESENCE].length > 0) ||\r\n        this.params.config.presence?.enabled === true\r\n      const accessTokenPayload: { access_token?: string } = {}\r\n      const config = {\r\n        broadcast,\r\n        presence: { ...presence, enabled: presence_enabled },\r\n        postgres_changes,\r\n        private: isPrivate,\r\n      }\r\n\r\n      if (this.socket.accessTokenValue) {\r\n        accessTokenPayload.access_token = this.socket.accessTokenValue\r\n      }\r\n\r\n      this._onError((e: Error) =>\r\n        callback?.(REALTIME_SUBSCRIBE_STATES.CHANNEL_ERROR, e)\r\n      )\r\n\r\n      this._onClose(() => callback?.(REALTIME_SUBSCRIBE_STATES.CLOSED))\r\n\r\n      this.updateJoinPayload({ ...{ config }, ...accessTokenPayload })\r\n\r\n      this.joinedOnce = true\r\n      this._rejoin(timeout)\r\n\r\n      this.joinPush\r\n        .receive('ok', async ({ postgres_changes }: PostgresChangesFilters) => {\r\n          this.socket.setAuth()\r\n          if (postgres_changes === undefined) {\r\n            callback?.(REALTIME_SUBSCRIBE_STATES.SUBSCRIBED)\r\n            return\r\n          } else {\r\n            const clientPostgresBindings = this.bindings.postgres_changes\r\n            const bindingsLen = clientPostgresBindings?.length ?? 0\r\n            const newPostgresBindings = []\r\n\r\n            for (let i = 0; i < bindingsLen; i++) {\r\n              const clientPostgresBinding = clientPostgresBindings[i]\r\n              const {\r\n                filter: { event, schema, table, filter },\r\n              } = clientPostgresBinding\r\n              const serverPostgresFilter =\r\n                postgres_changes && postgres_changes[i]\r\n\r\n              if (\r\n                serverPostgresFilter &&\r\n                serverPostgresFilter.event === event &&\r\n                serverPostgresFilter.schema === schema &&\r\n                serverPostgresFilter.table === table &&\r\n                serverPostgresFilter.filter === filter\r\n              ) {\r\n                newPostgresBindings.push({\r\n                  ...clientPostgresBinding,\r\n                  id: serverPostgresFilter.id,\r\n                })\r\n              } else {\r\n                this.unsubscribe()\r\n                this.state = CHANNEL_STATES.errored\r\n\r\n                callback?.(\r\n                  REALTIME_SUBSCRIBE_STATES.CHANNEL_ERROR,\r\n                  new Error(\r\n                    'mismatch between server and client bindings for postgres changes'\r\n                  )\r\n                )\r\n                return\r\n              }\r\n            }\r\n\r\n            this.bindings.postgres_changes = newPostgresBindings\r\n\r\n            callback && callback(REALTIME_SUBSCRIBE_STATES.SUBSCRIBED)\r\n            return\r\n          }\r\n        })\r\n        .receive('error', (error: { [key: string]: any }) => {\r\n          this.state = CHANNEL_STATES.errored\r\n          callback?.(\r\n            REALTIME_SUBSCRIBE_STATES.CHANNEL_ERROR,\r\n            new Error(\r\n              JSON.stringify(Object.values(error).join(', ') || 'error')\r\n            )\r\n          )\r\n          return\r\n        })\r\n        .receive('timeout', () => {\r\n          callback?.(REALTIME_SUBSCRIBE_STATES.TIMED_OUT)\r\n          return\r\n        })\r\n    }\r\n    return this\r\n  }\r\n\r\n  presenceState<\r\n    T extends { [key: string]: any } = {}\r\n  >(): RealtimePresenceState<T> {\r\n    return this.presence.state as RealtimePresenceState<T>\r\n  }\r\n\r\n  async track(\r\n    payload: { [key: string]: any },\r\n    opts: { [key: string]: any } = {}\r\n  ): Promise<RealtimeChannelSendResponse> {\r\n    return await this.send(\r\n      {\r\n        type: 'presence',\r\n        event: 'track',\r\n        payload,\r\n      },\r\n      opts.timeout || this.timeout\r\n    )\r\n  }\r\n\r\n  async untrack(\r\n    opts: { [key: string]: any } = {}\r\n  ): Promise<RealtimeChannelSendResponse> {\r\n    return await this.send(\r\n      {\r\n        type: 'presence',\r\n        event: 'untrack',\r\n      },\r\n      opts\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Creates an event handler that listens to changes.\r\n   */\r\n  on(\r\n    type: `${REALTIME_LISTEN_TYPES.PRESENCE}`,\r\n    filter: { event: `${REALTIME_PRESENCE_LISTEN_EVENTS.SYNC}` },\r\n    callback: () => void\r\n  ): RealtimeChannel\r\n  on<T extends { [key: string]: any }>(\r\n    type: `${REALTIME_LISTEN_TYPES.PRESENCE}`,\r\n    filter: { event: `${REALTIME_PRESENCE_LISTEN_EVENTS.JOIN}` },\r\n    callback: (payload: RealtimePresenceJoinPayload<T>) => void\r\n  ): RealtimeChannel\r\n  on<T extends { [key: string]: any }>(\r\n    type: `${REALTIME_LISTEN_TYPES.PRESENCE}`,\r\n    filter: { event: `${REALTIME_PRESENCE_LISTEN_EVENTS.LEAVE}` },\r\n    callback: (payload: RealtimePresenceLeavePayload<T>) => void\r\n  ): RealtimeChannel\r\n  on<T extends { [key: string]: any }>(\r\n    type: `${REALTIME_LISTEN_TYPES.POSTGRES_CHANGES}`,\r\n    filter: RealtimePostgresChangesFilter<`${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.ALL}`>,\r\n    callback: (payload: RealtimePostgresChangesPayload<T>) => void\r\n  ): RealtimeChannel\r\n  on<T extends { [key: string]: any }>(\r\n    type: `${REALTIME_LISTEN_TYPES.POSTGRES_CHANGES}`,\r\n    filter: RealtimePostgresChangesFilter<`${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.INSERT}`>,\r\n    callback: (payload: RealtimePostgresInsertPayload<T>) => void\r\n  ): RealtimeChannel\r\n  on<T extends { [key: string]: any }>(\r\n    type: `${REALTIME_LISTEN_TYPES.POSTGRES_CHANGES}`,\r\n    filter: RealtimePostgresChangesFilter<`${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.UPDATE}`>,\r\n    callback: (payload: RealtimePostgresUpdatePayload<T>) => void\r\n  ): RealtimeChannel\r\n  on<T extends { [key: string]: any }>(\r\n    type: `${REALTIME_LISTEN_TYPES.POSTGRES_CHANGES}`,\r\n    filter: RealtimePostgresChangesFilter<`${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.DELETE}`>,\r\n    callback: (payload: RealtimePostgresDeletePayload<T>) => void\r\n  ): RealtimeChannel\r\n  /**\r\n   * The following is placed here to display on supabase.com/docs/reference/javascript/subscribe.\r\n   * @param type One of \"broadcast\", \"presence\", or \"postgres_changes\".\r\n   * @param filter Custom object specific to the Realtime feature detailing which payloads to receive.\r\n   * @param callback Function to be invoked when event handler is triggered.\r\n   */\r\n  on(\r\n    type: `${REALTIME_LISTEN_TYPES.BROADCAST}`,\r\n    filter: { event: string },\r\n    callback: (payload: {\r\n      type: `${REALTIME_LISTEN_TYPES.BROADCAST}`\r\n      event: string\r\n      [key: string]: any\r\n    }) => void\r\n  ): RealtimeChannel\r\n  on<T extends { [key: string]: any }>(\r\n    type: `${REALTIME_LISTEN_TYPES.BROADCAST}`,\r\n    filter: { event: string },\r\n    callback: (payload: {\r\n      type: `${REALTIME_LISTEN_TYPES.BROADCAST}`\r\n      event: string\r\n      payload: T\r\n    }) => void\r\n  ): RealtimeChannel\r\n  on<T extends { [key: string]: any }>(\r\n    type: `${REALTIME_LISTEN_TYPES.SYSTEM}`,\r\n    filter: {},\r\n    callback: (payload: any) => void\r\n  ): RealtimeChannel\r\n  on(\r\n    type: `${REALTIME_LISTEN_TYPES}`,\r\n    filter: { event: string; [key: string]: string },\r\n    callback: (payload: any) => void\r\n  ): RealtimeChannel {\r\n    if (\r\n      this.state === CHANNEL_STATES.joined &&\r\n      type === REALTIME_LISTEN_TYPES.PRESENCE\r\n    ) {\r\n      this.socket.log(\r\n        'channel',\r\n        `resubscribe to ${this.topic} due to change in presence callbacks on joined channel`\r\n      )\r\n      this.unsubscribe().then(() => this.subscribe())\r\n    }\r\n    return this._on(type, filter, callback)\r\n  }\r\n  /**\r\n   * Sends a message into the channel.\r\n   *\r\n   * @param args Arguments to send to channel\r\n   * @param args.type The type of event to send\r\n   * @param args.event The name of the event being sent\r\n   * @param args.payload Payload to be sent\r\n   * @param opts Options to be used during the send process\r\n   */\r\n  async send(\r\n    args: {\r\n      type: 'broadcast' | 'presence' | 'postgres_changes'\r\n      event: string\r\n      payload?: any\r\n      [key: string]: any\r\n    },\r\n    opts: { [key: string]: any } = {}\r\n  ): Promise<RealtimeChannelSendResponse> {\r\n    if (!this._canPush() && args.type === 'broadcast') {\r\n      const { event, payload: endpoint_payload } = args\r\n      const authorization = this.socket.accessTokenValue\r\n        ? `Bearer ${this.socket.accessTokenValue}`\r\n        : ''\r\n      const options = {\r\n        method: 'POST',\r\n        headers: {\r\n          Authorization: authorization,\r\n          apikey: this.socket.apiKey ? this.socket.apiKey : '',\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          messages: [\r\n            {\r\n              topic: this.subTopic,\r\n              event,\r\n              payload: endpoint_payload,\r\n              private: this.private,\r\n            },\r\n          ],\r\n        }),\r\n      }\r\n\r\n      try {\r\n        const response = await this._fetchWithTimeout(\r\n          this.broadcastEndpointURL,\r\n          options,\r\n          opts.timeout ?? this.timeout\r\n        )\r\n\r\n        await response.body?.cancel()\r\n        return response.ok ? 'ok' : 'error'\r\n      } catch (error: any) {\r\n        if (error.name === 'AbortError') {\r\n          return 'timed out'\r\n        } else {\r\n          return 'error'\r\n        }\r\n      }\r\n    } else {\r\n      return new Promise((resolve) => {\r\n        const push = this._push(args.type, args, opts.timeout || this.timeout)\r\n\r\n        if (args.type === 'broadcast' && !this.params?.config?.broadcast?.ack) {\r\n          resolve('ok')\r\n        }\r\n\r\n        push.receive('ok', () => resolve('ok'))\r\n        push.receive('error', () => resolve('error'))\r\n        push.receive('timeout', () => resolve('timed out'))\r\n      })\r\n    }\r\n  }\r\n\r\n  updateJoinPayload(payload: { [key: string]: any }): void {\r\n    this.joinPush.updatePayload(payload)\r\n  }\r\n\r\n  /**\r\n   * Leaves the channel.\r\n   *\r\n   * Unsubscribes from server events, and instructs channel to terminate on server.\r\n   * Triggers onClose() hooks.\r\n   *\r\n   * To receive leave acknowledgements, use the a `receive` hook to bind to the server ack, ie:\r\n   * channel.unsubscribe().receive(\"ok\", () => alert(\"left!\") )\r\n   */\r\n  unsubscribe(timeout = this.timeout): Promise<'ok' | 'timed out' | 'error'> {\r\n    this.state = CHANNEL_STATES.leaving\r\n    const onClose = () => {\r\n      this.socket.log('channel', `leave ${this.topic}`)\r\n      this._trigger(CHANNEL_EVENTS.close, 'leave', this._joinRef())\r\n    }\r\n\r\n    this.joinPush.destroy()\r\n\r\n    let leavePush: Push | null = null\r\n\r\n    return new Promise<RealtimeChannelSendResponse>((resolve) => {\r\n      leavePush = new Push(this, CHANNEL_EVENTS.leave, {}, timeout)\r\n      leavePush\r\n        .receive('ok', () => {\r\n          onClose()\r\n          resolve('ok')\r\n        })\r\n        .receive('timeout', () => {\r\n          onClose()\r\n          resolve('timed out')\r\n        })\r\n        .receive('error', () => {\r\n          resolve('error')\r\n        })\r\n\r\n      leavePush.send()\r\n      if (!this._canPush()) {\r\n        leavePush.trigger('ok', {})\r\n      }\r\n    }).finally(() => {\r\n      leavePush?.destroy()\r\n    })\r\n  }\r\n  /**\r\n   * Teardown the channel.\r\n   *\r\n   * Destroys and stops related timers.\r\n   */\r\n  teardown() {\r\n    this.pushBuffer.forEach((push: Push) => push.destroy())\r\n    this.pushBuffer = []\r\n    this.rejoinTimer.reset()\r\n    this.joinPush.destroy()\r\n    this.state = CHANNEL_STATES.closed\r\n    this.bindings = {}\r\n  }\r\n\r\n  /** @internal */\r\n\r\n  async _fetchWithTimeout(\r\n    url: string,\r\n    options: { [key: string]: any },\r\n    timeout: number\r\n  ) {\r\n    const controller = new AbortController()\r\n    const id = setTimeout(() => controller.abort(), timeout)\r\n\r\n    const response = await this.socket.fetch(url, {\r\n      ...options,\r\n      signal: controller.signal,\r\n    })\r\n\r\n    clearTimeout(id)\r\n\r\n    return response\r\n  }\r\n\r\n  /** @internal */\r\n  _push(\r\n    event: string,\r\n    payload: { [key: string]: any },\r\n    timeout = this.timeout\r\n  ) {\r\n    if (!this.joinedOnce) {\r\n      throw `tried to push '${event}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`\r\n    }\r\n    let pushEvent = new Push(this, event, payload, timeout)\r\n    if (this._canPush()) {\r\n      pushEvent.send()\r\n    } else {\r\n      this._addToPushBuffer(pushEvent)\r\n    }\r\n\r\n    return pushEvent\r\n  }\r\n\r\n  /** @internal */\r\n  _addToPushBuffer(pushEvent: Push) {\r\n    pushEvent.startTimeout()\r\n    this.pushBuffer.push(pushEvent)\r\n\r\n    // Enforce buffer size limit\r\n    if (this.pushBuffer.length > MAX_PUSH_BUFFER_SIZE) {\r\n      const removedPush = this.pushBuffer.shift()\r\n      if (removedPush) {\r\n        removedPush.destroy()\r\n        this.socket.log(\r\n          'channel',\r\n          `discarded push due to buffer overflow: ${removedPush.event}`,\r\n          removedPush.payload\r\n        )\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Overridable message hook\r\n   *\r\n   * Receives all events for specialized message handling before dispatching to the channel callbacks.\r\n   * Must return the payload, modified or unmodified.\r\n   *\r\n   * @internal\r\n   */\r\n  _onMessage(_event: string, payload: any, _ref?: string) {\r\n    return payload\r\n  }\r\n\r\n  /** @internal */\r\n  _isMember(topic: string): boolean {\r\n    return this.topic === topic\r\n  }\r\n\r\n  /** @internal */\r\n  _joinRef(): string {\r\n    return this.joinPush.ref\r\n  }\r\n\r\n  /** @internal */\r\n  _trigger(type: string, payload?: any, ref?: string) {\r\n    const typeLower = type.toLocaleLowerCase()\r\n    const { close, error, leave, join } = CHANNEL_EVENTS\r\n    const events: string[] = [close, error, leave, join]\r\n    if (ref && events.indexOf(typeLower) >= 0 && ref !== this._joinRef()) {\r\n      return\r\n    }\r\n    let handledPayload = this._onMessage(typeLower, payload, ref)\r\n    if (payload && !handledPayload) {\r\n      throw 'channel onMessage callbacks must return the payload, modified or unmodified'\r\n    }\r\n\r\n    if (['insert', 'update', 'delete'].includes(typeLower)) {\r\n      this.bindings.postgres_changes\r\n        ?.filter((bind) => {\r\n          return (\r\n            bind.filter?.event === '*' ||\r\n            bind.filter?.event?.toLocaleLowerCase() === typeLower\r\n          )\r\n        })\r\n        .map((bind) => bind.callback(handledPayload, ref))\r\n    } else {\r\n      this.bindings[typeLower]\r\n        ?.filter((bind) => {\r\n          if (\r\n            ['broadcast', 'presence', 'postgres_changes'].includes(typeLower)\r\n          ) {\r\n            if ('id' in bind) {\r\n              const bindId = bind.id\r\n              const bindEvent = bind.filter?.event\r\n              return (\r\n                bindId &&\r\n                payload.ids?.includes(bindId) &&\r\n                (bindEvent === '*' ||\r\n                  bindEvent?.toLocaleLowerCase() ===\r\n                    payload.data?.type.toLocaleLowerCase())\r\n              )\r\n            } else {\r\n              const bindEvent = bind?.filter?.event?.toLocaleLowerCase()\r\n              return (\r\n                bindEvent === '*' ||\r\n                bindEvent === payload?.event?.toLocaleLowerCase()\r\n              )\r\n            }\r\n          } else {\r\n            return bind.type.toLocaleLowerCase() === typeLower\r\n          }\r\n        })\r\n        .map((bind) => {\r\n          if (typeof handledPayload === 'object' && 'ids' in handledPayload) {\r\n            const postgresChanges = handledPayload.data\r\n            const { schema, table, commit_timestamp, type, errors } =\r\n              postgresChanges\r\n            const enrichedPayload = {\r\n              schema: schema,\r\n              table: table,\r\n              commit_timestamp: commit_timestamp,\r\n              eventType: type,\r\n              new: {},\r\n              old: {},\r\n              errors: errors,\r\n            }\r\n            handledPayload = {\r\n              ...enrichedPayload,\r\n              ...this._getPayloadRecords(postgresChanges),\r\n            }\r\n          }\r\n          bind.callback(handledPayload, ref)\r\n        })\r\n    }\r\n  }\r\n\r\n  /** @internal */\r\n  _isClosed(): boolean {\r\n    return this.state === CHANNEL_STATES.closed\r\n  }\r\n\r\n  /** @internal */\r\n  _isJoined(): boolean {\r\n    return this.state === CHANNEL_STATES.joined\r\n  }\r\n\r\n  /** @internal */\r\n  _isJoining(): boolean {\r\n    return this.state === CHANNEL_STATES.joining\r\n  }\r\n\r\n  /** @internal */\r\n  _isLeaving(): boolean {\r\n    return this.state === CHANNEL_STATES.leaving\r\n  }\r\n\r\n  /** @internal */\r\n  _replyEventName(ref: string): string {\r\n    return `chan_reply_${ref}`\r\n  }\r\n\r\n  /** @internal */\r\n  _on(type: string, filter: { [key: string]: any }, callback: Function) {\r\n    const typeLower = type.toLocaleLowerCase()\r\n    const binding = {\r\n      type: typeLower,\r\n      filter: filter,\r\n      callback: callback,\r\n    }\r\n\r\n    if (this.bindings[typeLower]) {\r\n      this.bindings[typeLower].push(binding)\r\n    } else {\r\n      this.bindings[typeLower] = [binding]\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /** @internal */\r\n  _off(type: string, filter: { [key: string]: any }) {\r\n    const typeLower = type.toLocaleLowerCase()\r\n\r\n    if (this.bindings[typeLower]) {\r\n      this.bindings[typeLower] = this.bindings[typeLower].filter((bind) => {\r\n        return !(\r\n          bind.type?.toLocaleLowerCase() === typeLower &&\r\n          RealtimeChannel.isEqual(bind.filter, filter)\r\n        )\r\n      })\r\n    }\r\n    return this\r\n  }\r\n\r\n  /** @internal */\r\n  private static isEqual(\r\n    obj1: { [key: string]: string },\r\n    obj2: { [key: string]: string }\r\n  ) {\r\n    if (Object.keys(obj1).length !== Object.keys(obj2).length) {\r\n      return false\r\n    }\r\n\r\n    for (const k in obj1) {\r\n      if (obj1[k] !== obj2[k]) {\r\n        return false\r\n      }\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  /** @internal */\r\n  private _rejoinUntilConnected() {\r\n    this.rejoinTimer.scheduleTimeout()\r\n    if (this.socket.isConnected()) {\r\n      this._rejoin()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registers a callback that will be executed when the channel closes.\r\n   *\r\n   * @internal\r\n   */\r\n  private _onClose(callback: Function) {\r\n    this._on(CHANNEL_EVENTS.close, {}, callback)\r\n  }\r\n\r\n  /**\r\n   * Registers a callback that will be executed when the channel encounteres an error.\r\n   *\r\n   * @internal\r\n   */\r\n  private _onError(callback: Function) {\r\n    this._on(CHANNEL_EVENTS.error, {}, (reason: string) => callback(reason))\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if the socket is connected and the channel has been joined.\r\n   *\r\n   * @internal\r\n   */\r\n  private _canPush(): boolean {\r\n    return this.socket.isConnected() && this._isJoined()\r\n  }\r\n\r\n  /** @internal */\r\n  private _rejoin(timeout = this.timeout): void {\r\n    if (this._isLeaving()) {\r\n      return\r\n    }\r\n    this.socket._leaveOpenTopic(this.topic)\r\n    this.state = CHANNEL_STATES.joining\r\n    this.joinPush.resend(timeout)\r\n  }\r\n\r\n  /** @internal */\r\n  private _getPayloadRecords(payload: any) {\r\n    const records = {\r\n      new: {},\r\n      old: {},\r\n    }\r\n\r\n    if (payload.type === 'INSERT' || payload.type === 'UPDATE') {\r\n      records.new = Transformers.convertChangeData(\r\n        payload.columns,\r\n        payload.record\r\n      )\r\n    }\r\n\r\n    if (payload.type === 'UPDATE' || payload.type === 'DELETE') {\r\n      records.old = Transformers.convertChangeData(\r\n        payload.columns,\r\n        payload.old_record\r\n      )\r\n    }\r\n\r\n    return records\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}