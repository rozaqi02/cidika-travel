{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// @ts-ignore\nconst node_fetch_1 = __importDefault(require(\"@supabase/node-fetch\"));\nconst PostgrestError_1 = __importDefault(require(\"./PostgrestError\"));\nclass PostgrestBuilder {\n  constructor(builder) {\n    var _a, _b;\n    this.shouldThrowOnError = false;\n    this.method = builder.method;\n    this.url = builder.url;\n    this.headers = new Headers(builder.headers);\n    this.schema = builder.schema;\n    this.body = builder.body;\n    this.shouldThrowOnError = (_a = builder.shouldThrowOnError) !== null && _a !== void 0 ? _a : false;\n    this.signal = builder.signal;\n    this.isMaybeSingle = (_b = builder.isMaybeSingle) !== null && _b !== void 0 ? _b : false;\n    if (builder.fetch) {\n      this.fetch = builder.fetch;\n    } else if (typeof fetch === 'undefined') {\n      this.fetch = node_fetch_1.default;\n    } else {\n      this.fetch = fetch;\n    }\n  }\n  /**\r\n   * If there's an error with the query, throwOnError will reject the promise by\r\n   * throwing the error instead of returning it as part of a successful response.\r\n   *\r\n   * {@link https://github.com/supabase/supabase-js/issues/92}\r\n   */\n  throwOnError() {\n    this.shouldThrowOnError = true;\n    return this;\n  }\n  /**\r\n   * Set an HTTP header for the request.\r\n   */\n  setHeader(name, value) {\n    this.headers = new Headers(this.headers);\n    this.headers.set(name, value);\n    return this;\n  }\n  then(onfulfilled, onrejected) {\n    // https://postgrest.org/en/stable/api.html#switching-schemas\n    if (this.schema === undefined) {\n      // skip\n    } else if (['GET', 'HEAD'].includes(this.method)) {\n      this.headers.set('Accept-Profile', this.schema);\n    } else {\n      this.headers.set('Content-Profile', this.schema);\n    }\n    if (this.method !== 'GET' && this.method !== 'HEAD') {\n      this.headers.set('Content-Type', 'application/json');\n    }\n    // NOTE: Invoke w/o `this` to avoid illegal invocation error.\n    // https://github.com/supabase/postgrest-js/pull/247\n    const _fetch = this.fetch;\n    let res = _fetch(this.url.toString(), {\n      method: this.method,\n      headers: this.headers,\n      body: JSON.stringify(this.body),\n      signal: this.signal\n    }).then(async res => {\n      var _a, _b, _c, _d;\n      let error = null;\n      let data = null;\n      let count = null;\n      let status = res.status;\n      let statusText = res.statusText;\n      if (res.ok) {\n        if (this.method !== 'HEAD') {\n          const body = await res.text();\n          if (body === '') {\n            // Prefer: return=minimal\n          } else if (this.headers.get('Accept') === 'text/csv') {\n            data = body;\n          } else if (this.headers.get('Accept') && ((_a = this.headers.get('Accept')) === null || _a === void 0 ? void 0 : _a.includes('application/vnd.pgrst.plan+text'))) {\n            data = body;\n          } else {\n            data = JSON.parse(body);\n          }\n        }\n        const countHeader = (_b = this.headers.get('Prefer')) === null || _b === void 0 ? void 0 : _b.match(/count=(exact|planned|estimated)/);\n        const contentRange = (_c = res.headers.get('content-range')) === null || _c === void 0 ? void 0 : _c.split('/');\n        if (countHeader && contentRange && contentRange.length > 1) {\n          count = parseInt(contentRange[1]);\n        }\n        // Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361\n        // Issue persists e.g. for `.insert([...]).select().maybeSingle()`\n        if (this.isMaybeSingle && this.method === 'GET' && Array.isArray(data)) {\n          if (data.length > 1) {\n            error = {\n              // https://github.com/PostgREST/postgrest/blob/a867d79c42419af16c18c3fb019eba8df992626f/src/PostgREST/Error.hs#L553\n              code: 'PGRST116',\n              details: `Results contain ${data.length} rows, application/vnd.pgrst.object+json requires 1 row`,\n              hint: null,\n              message: 'JSON object requested, multiple (or no) rows returned'\n            };\n            data = null;\n            count = null;\n            status = 406;\n            statusText = 'Not Acceptable';\n          } else if (data.length === 1) {\n            data = data[0];\n          } else {\n            data = null;\n          }\n        }\n      } else {\n        const body = await res.text();\n        try {\n          error = JSON.parse(body);\n          // Workaround for https://github.com/supabase/postgrest-js/issues/295\n          if (Array.isArray(error) && res.status === 404) {\n            data = [];\n            error = null;\n            status = 200;\n            statusText = 'OK';\n          }\n        } catch (_e) {\n          // Workaround for https://github.com/supabase/postgrest-js/issues/295\n          if (res.status === 404 && body === '') {\n            status = 204;\n            statusText = 'No Content';\n          } else {\n            error = {\n              message: body\n            };\n          }\n        }\n        if (error && this.isMaybeSingle && ((_d = error === null || error === void 0 ? void 0 : error.details) === null || _d === void 0 ? void 0 : _d.includes('0 rows'))) {\n          error = null;\n          status = 200;\n          statusText = 'OK';\n        }\n        if (error && this.shouldThrowOnError) {\n          throw new PostgrestError_1.default(error);\n        }\n      }\n      const postgrestResponse = {\n        error,\n        data,\n        count,\n        status,\n        statusText\n      };\n      return postgrestResponse;\n    });\n    if (!this.shouldThrowOnError) {\n      res = res.catch(fetchError => {\n        var _a, _b, _c;\n        return {\n          error: {\n            message: `${(_a = fetchError === null || fetchError === void 0 ? void 0 : fetchError.name) !== null && _a !== void 0 ? _a : 'FetchError'}: ${fetchError === null || fetchError === void 0 ? void 0 : fetchError.message}`,\n            details: `${(_b = fetchError === null || fetchError === void 0 ? void 0 : fetchError.stack) !== null && _b !== void 0 ? _b : ''}`,\n            hint: '',\n            code: `${(_c = fetchError === null || fetchError === void 0 ? void 0 : fetchError.code) !== null && _c !== void 0 ? _c : ''}`\n          },\n          data: null,\n          count: null,\n          status: 0,\n          statusText: ''\n        };\n      });\n    }\n    return res.then(onfulfilled, onrejected);\n  }\n  /**\r\n   * Override the type of the returned `data`.\r\n   *\r\n   * @typeParam NewResult - The new result type to override with\r\n   * @deprecated Use overrideTypes<yourType, { merge: false }>() method at the end of your call chain instead\r\n   */\n  returns() {\n    /* istanbul ignore next */\n    return this;\n  }\n  /**\r\n   * Override the type of the returned `data` field in the response.\r\n   *\r\n   * @typeParam NewResult - The new type to cast the response data to\r\n   * @typeParam Options - Optional type configuration (defaults to { merge: true })\r\n   * @typeParam Options.merge - When true, merges the new type with existing return type. When false, replaces the existing types entirely (defaults to true)\r\n   * @example\r\n   * ```typescript\r\n   * // Merge with existing types (default behavior)\r\n   * const query = supabase\r\n   *   .from('users')\r\n   *   .select()\r\n   *   .overrideTypes<{ custom_field: string }>()\r\n   *\r\n   * // Replace existing types completely\r\n   * const replaceQuery = supabase\r\n   *   .from('users')\r\n   *   .select()\r\n   *   .overrideTypes<{ id: number; name: string }, { merge: false }>()\r\n   * ```\r\n   * @returns A PostgrestBuilder instance with the new type\r\n   */\n  overrideTypes() {\n    return this;\n  }\n}\nexports.default = PostgrestBuilder;","map":{"version":3,"names":["node_fetch_1","__importDefault","require","PostgrestError_1","PostgrestBuilder","constructor","builder","shouldThrowOnError","method","url","headers","Headers","schema","body","_a","signal","isMaybeSingle","_b","fetch","default","throwOnError","setHeader","name","value","set","then","onfulfilled","onrejected","undefined","includes","_fetch","res","toString","JSON","stringify","error","data","count","status","statusText","ok","text","get","parse","countHeader","match","contentRange","_c","split","length","parseInt","Array","isArray","code","details","hint","message","_e","_d","postgrestResponse","catch","fetchError","stack","returns","overrideTypes","exports"],"sources":["C:\\projects\\cidika-travel\\node_modules\\@supabase\\postgrest-js\\src\\PostgrestBuilder.ts"],"sourcesContent":["// @ts-ignore\r\nimport nodeFetch from '@supabase/node-fetch'\r\n\r\nimport type {\r\n  Fetch,\r\n  PostgrestSingleResponse,\r\n  PostgrestResponseSuccess,\r\n  CheckMatchingArrayTypes,\r\n  MergePartialResult,\r\n  IsValidResultOverride,\r\n  ClientServerOptions,\r\n} from './types'\r\nimport PostgrestError from './PostgrestError'\r\nimport { ContainsNull } from './select-query-parser/types'\r\n\r\nexport default abstract class PostgrestBuilder<\r\n  ClientOptions extends ClientServerOptions,\r\n  Result,\r\n  ThrowOnError extends boolean = false\r\n> implements\r\n    PromiseLike<\r\n      ThrowOnError extends true ? PostgrestResponseSuccess<Result> : PostgrestSingleResponse<Result>\r\n    >\r\n{\r\n  protected method: 'GET' | 'HEAD' | 'POST' | 'PATCH' | 'DELETE'\r\n  protected url: URL\r\n  protected headers: Headers\r\n  protected schema?: string\r\n  protected body?: unknown\r\n  protected shouldThrowOnError = false\r\n  protected signal?: AbortSignal\r\n  protected fetch: Fetch\r\n  protected isMaybeSingle: boolean\r\n\r\n  constructor(builder: {\r\n    method: 'GET' | 'HEAD' | 'POST' | 'PATCH' | 'DELETE'\r\n    url: URL\r\n    headers: HeadersInit\r\n    schema?: string\r\n    body?: unknown\r\n    shouldThrowOnError?: boolean\r\n    signal?: AbortSignal\r\n    fetch?: Fetch\r\n    isMaybeSingle?: boolean\r\n  }) {\r\n    this.method = builder.method\r\n    this.url = builder.url\r\n    this.headers = new Headers(builder.headers)\r\n    this.schema = builder.schema\r\n    this.body = builder.body\r\n    this.shouldThrowOnError = builder.shouldThrowOnError ?? false\r\n    this.signal = builder.signal\r\n    this.isMaybeSingle = builder.isMaybeSingle ?? false\r\n\r\n    if (builder.fetch) {\r\n      this.fetch = builder.fetch\r\n    } else if (typeof fetch === 'undefined') {\r\n      this.fetch = nodeFetch\r\n    } else {\r\n      this.fetch = fetch\r\n    }\r\n  }\r\n\r\n  /**\r\n   * If there's an error with the query, throwOnError will reject the promise by\r\n   * throwing the error instead of returning it as part of a successful response.\r\n   *\r\n   * {@link https://github.com/supabase/supabase-js/issues/92}\r\n   */\r\n  throwOnError(): this & PostgrestBuilder<ClientOptions, Result, true> {\r\n    this.shouldThrowOnError = true\r\n    return this as this & PostgrestBuilder<ClientOptions, Result, true>\r\n  }\r\n\r\n  /**\r\n   * Set an HTTP header for the request.\r\n   */\r\n  setHeader(name: string, value: string): this {\r\n    this.headers = new Headers(this.headers)\r\n    this.headers.set(name, value)\r\n    return this\r\n  }\r\n\r\n  then<\r\n    TResult1 = ThrowOnError extends true\r\n      ? PostgrestResponseSuccess<Result>\r\n      : PostgrestSingleResponse<Result>,\r\n    TResult2 = never\r\n  >(\r\n    onfulfilled?:\r\n      | ((\r\n          value: ThrowOnError extends true\r\n            ? PostgrestResponseSuccess<Result>\r\n            : PostgrestSingleResponse<Result>\r\n        ) => TResult1 | PromiseLike<TResult1>)\r\n      | undefined\r\n      | null,\r\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null\r\n  ): PromiseLike<TResult1 | TResult2> {\r\n    // https://postgrest.org/en/stable/api.html#switching-schemas\r\n    if (this.schema === undefined) {\r\n      // skip\r\n    } else if (['GET', 'HEAD'].includes(this.method)) {\r\n      this.headers.set('Accept-Profile', this.schema)\r\n    } else {\r\n      this.headers.set('Content-Profile', this.schema)\r\n    }\r\n    if (this.method !== 'GET' && this.method !== 'HEAD') {\r\n      this.headers.set('Content-Type', 'application/json')\r\n    }\r\n\r\n    // NOTE: Invoke w/o `this` to avoid illegal invocation error.\r\n    // https://github.com/supabase/postgrest-js/pull/247\r\n    const _fetch = this.fetch\r\n    let res = _fetch(this.url.toString(), {\r\n      method: this.method,\r\n      headers: this.headers,\r\n      body: JSON.stringify(this.body),\r\n      signal: this.signal,\r\n    }).then(async (res) => {\r\n      let error = null\r\n      let data = null\r\n      let count: number | null = null\r\n      let status = res.status\r\n      let statusText = res.statusText\r\n\r\n      if (res.ok) {\r\n        if (this.method !== 'HEAD') {\r\n          const body = await res.text()\r\n          if (body === '') {\r\n            // Prefer: return=minimal\r\n          } else if (this.headers.get('Accept') === 'text/csv') {\r\n            data = body\r\n          } else if (\r\n            this.headers.get('Accept') &&\r\n            this.headers.get('Accept')?.includes('application/vnd.pgrst.plan+text')\r\n          ) {\r\n            data = body\r\n          } else {\r\n            data = JSON.parse(body)\r\n          }\r\n        }\r\n\r\n        const countHeader = this.headers.get('Prefer')?.match(/count=(exact|planned|estimated)/)\r\n        const contentRange = res.headers.get('content-range')?.split('/')\r\n        if (countHeader && contentRange && contentRange.length > 1) {\r\n          count = parseInt(contentRange[1])\r\n        }\r\n\r\n        // Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361\r\n        // Issue persists e.g. for `.insert([...]).select().maybeSingle()`\r\n        if (this.isMaybeSingle && this.method === 'GET' && Array.isArray(data)) {\r\n          if (data.length > 1) {\r\n            error = {\r\n              // https://github.com/PostgREST/postgrest/blob/a867d79c42419af16c18c3fb019eba8df992626f/src/PostgREST/Error.hs#L553\r\n              code: 'PGRST116',\r\n              details: `Results contain ${data.length} rows, application/vnd.pgrst.object+json requires 1 row`,\r\n              hint: null,\r\n              message: 'JSON object requested, multiple (or no) rows returned',\r\n            }\r\n            data = null\r\n            count = null\r\n            status = 406\r\n            statusText = 'Not Acceptable'\r\n          } else if (data.length === 1) {\r\n            data = data[0]\r\n          } else {\r\n            data = null\r\n          }\r\n        }\r\n      } else {\r\n        const body = await res.text()\r\n\r\n        try {\r\n          error = JSON.parse(body)\r\n\r\n          // Workaround for https://github.com/supabase/postgrest-js/issues/295\r\n          if (Array.isArray(error) && res.status === 404) {\r\n            data = []\r\n            error = null\r\n            status = 200\r\n            statusText = 'OK'\r\n          }\r\n        } catch {\r\n          // Workaround for https://github.com/supabase/postgrest-js/issues/295\r\n          if (res.status === 404 && body === '') {\r\n            status = 204\r\n            statusText = 'No Content'\r\n          } else {\r\n            error = {\r\n              message: body,\r\n            }\r\n          }\r\n        }\r\n\r\n        if (error && this.isMaybeSingle && error?.details?.includes('0 rows')) {\r\n          error = null\r\n          status = 200\r\n          statusText = 'OK'\r\n        }\r\n\r\n        if (error && this.shouldThrowOnError) {\r\n          throw new PostgrestError(error)\r\n        }\r\n      }\r\n\r\n      const postgrestResponse = {\r\n        error,\r\n        data,\r\n        count,\r\n        status,\r\n        statusText,\r\n      }\r\n\r\n      return postgrestResponse\r\n    })\r\n    if (!this.shouldThrowOnError) {\r\n      res = res.catch((fetchError) => ({\r\n        error: {\r\n          message: `${fetchError?.name ?? 'FetchError'}: ${fetchError?.message}`,\r\n          details: `${fetchError?.stack ?? ''}`,\r\n          hint: '',\r\n          code: `${fetchError?.code ?? ''}`,\r\n        },\r\n        data: null,\r\n        count: null,\r\n        status: 0,\r\n        statusText: '',\r\n      }))\r\n    }\r\n\r\n    return res.then(onfulfilled, onrejected)\r\n  }\r\n\r\n  /**\r\n   * Override the type of the returned `data`.\r\n   *\r\n   * @typeParam NewResult - The new result type to override with\r\n   * @deprecated Use overrideTypes<yourType, { merge: false }>() method at the end of your call chain instead\r\n   */\r\n  returns<NewResult>(): PostgrestBuilder<\r\n    ClientOptions,\r\n    CheckMatchingArrayTypes<Result, NewResult>,\r\n    ThrowOnError\r\n  > {\r\n    /* istanbul ignore next */\r\n    return this as unknown as PostgrestBuilder<\r\n      ClientOptions,\r\n      CheckMatchingArrayTypes<Result, NewResult>,\r\n      ThrowOnError\r\n    >\r\n  }\r\n\r\n  /**\r\n   * Override the type of the returned `data` field in the response.\r\n   *\r\n   * @typeParam NewResult - The new type to cast the response data to\r\n   * @typeParam Options - Optional type configuration (defaults to { merge: true })\r\n   * @typeParam Options.merge - When true, merges the new type with existing return type. When false, replaces the existing types entirely (defaults to true)\r\n   * @example\r\n   * ```typescript\r\n   * // Merge with existing types (default behavior)\r\n   * const query = supabase\r\n   *   .from('users')\r\n   *   .select()\r\n   *   .overrideTypes<{ custom_field: string }>()\r\n   *\r\n   * // Replace existing types completely\r\n   * const replaceQuery = supabase\r\n   *   .from('users')\r\n   *   .select()\r\n   *   .overrideTypes<{ id: number; name: string }, { merge: false }>()\r\n   * ```\r\n   * @returns A PostgrestBuilder instance with the new type\r\n   */\r\n  overrideTypes<\r\n    NewResult,\r\n    Options extends { merge?: boolean } = { merge: true }\r\n  >(): PostgrestBuilder<\r\n    ClientOptions,\r\n    IsValidResultOverride<Result, NewResult, false, false> extends true\r\n      ? // Preserve the optionality of the result if the overriden type is an object (case of chaining with `maybeSingle`)\r\n        ContainsNull<Result> extends true\r\n        ? MergePartialResult<NewResult, NonNullable<Result>, Options> | null\r\n        : MergePartialResult<NewResult, Result, Options>\r\n      : CheckMatchingArrayTypes<Result, NewResult>,\r\n    ThrowOnError\r\n  > {\r\n    return this as unknown as PostgrestBuilder<\r\n      ClientOptions,\r\n      IsValidResultOverride<Result, NewResult, false, false> extends true\r\n        ? // Preserve the optionality of the result if the overriden type is an object (case of chaining with `maybeSingle`)\r\n          ContainsNull<Result> extends true\r\n          ? MergePartialResult<NewResult, NonNullable<Result>, Options> | null\r\n          : MergePartialResult<NewResult, Result, Options>\r\n        : CheckMatchingArrayTypes<Result, NewResult>,\r\n      ThrowOnError\r\n    >\r\n  }\r\n}\r\n"],"mappings":";;;;;;;;;;AAAA;AACA,MAAAA,YAAA,GAAAC,eAAA,CAAAC,OAAA;AAWA,MAAAC,gBAAA,GAAAF,eAAA,CAAAC,OAAA;AAGA,MAA8BE,gBAAgB;EAmB5CC,YAAYC,OAUX;;IAfS,KAAAC,kBAAkB,GAAG,KAAK;IAgBlC,IAAI,CAACC,MAAM,GAAGF,OAAO,CAACE,MAAM;IAC5B,IAAI,CAACC,GAAG,GAAGH,OAAO,CAACG,GAAG;IACtB,IAAI,CAACC,OAAO,GAAG,IAAIC,OAAO,CAACL,OAAO,CAACI,OAAO,CAAC;IAC3C,IAAI,CAACE,MAAM,GAAGN,OAAO,CAACM,MAAM;IAC5B,IAAI,CAACC,IAAI,GAAGP,OAAO,CAACO,IAAI;IACxB,IAAI,CAACN,kBAAkB,GAAG,CAAAO,EAAA,GAAAR,OAAO,CAACC,kBAAkB,cAAAO,EAAA,cAAAA,EAAA,GAAI,KAAK;IAC7D,IAAI,CAACC,MAAM,GAAGT,OAAO,CAACS,MAAM;IAC5B,IAAI,CAACC,aAAa,GAAG,CAAAC,EAAA,GAAAX,OAAO,CAACU,aAAa,cAAAC,EAAA,cAAAA,EAAA,GAAI,KAAK;IAEnD,IAAIX,OAAO,CAACY,KAAK,EAAE;MACjB,IAAI,CAACA,KAAK,GAAGZ,OAAO,CAACY,KAAK;KAC3B,MAAM,IAAI,OAAOA,KAAK,KAAK,WAAW,EAAE;MACvC,IAAI,CAACA,KAAK,GAAGlB,YAAA,CAAAmB,OAAS;KACvB,MAAM;MACL,IAAI,CAACD,KAAK,GAAGA,KAAK;;EAEtB;EAEA;;;;;;EAMAE,YAAYA,CAAA;IACV,IAAI,CAACb,kBAAkB,GAAG,IAAI;IAC9B,OAAO,IAA4D;EACrE;EAEA;;;EAGAc,SAASA,CAACC,IAAY,EAAEC,KAAa;IACnC,IAAI,CAACb,OAAO,GAAG,IAAIC,OAAO,CAAC,IAAI,CAACD,OAAO,CAAC;IACxC,IAAI,CAACA,OAAO,CAACc,GAAG,CAACF,IAAI,EAAEC,KAAK,CAAC;IAC7B,OAAO,IAAI;EACb;EAEAE,IAAIA,CAMFC,WAOQ,EACRC,UAAmF;IAEnF;IACA,IAAI,IAAI,CAACf,MAAM,KAAKgB,SAAS,EAAE;MAC7B;IAAA,CACD,MAAM,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,CAACC,QAAQ,CAAC,IAAI,CAACrB,MAAM,CAAC,EAAE;MAChD,IAAI,CAACE,OAAO,CAACc,GAAG,CAAC,gBAAgB,EAAE,IAAI,CAACZ,MAAM,CAAC;KAChD,MAAM;MACL,IAAI,CAACF,OAAO,CAACc,GAAG,CAAC,iBAAiB,EAAE,IAAI,CAACZ,MAAM,CAAC;;IAElD,IAAI,IAAI,CAACJ,MAAM,KAAK,KAAK,IAAI,IAAI,CAACA,MAAM,KAAK,MAAM,EAAE;MACnD,IAAI,CAACE,OAAO,CAACc,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;;IAGtD;IACA;IACA,MAAMM,MAAM,GAAG,IAAI,CAACZ,KAAK;IACzB,IAAIa,GAAG,GAAGD,MAAM,CAAC,IAAI,CAACrB,GAAG,CAACuB,QAAQ,EAAE,EAAE;MACpCxB,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBE,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBG,IAAI,EAAEoB,IAAI,CAACC,SAAS,CAAC,IAAI,CAACrB,IAAI,CAAC;MAC/BE,MAAM,EAAE,IAAI,CAACA;KACd,CAAC,CAACU,IAAI,CAAC,MAAOM,GAAG,IAAI;;MACpB,IAAII,KAAK,GAAG,IAAI;MAChB,IAAIC,IAAI,GAAG,IAAI;MACf,IAAIC,KAAK,GAAkB,IAAI;MAC/B,IAAIC,MAAM,GAAGP,GAAG,CAACO,MAAM;MACvB,IAAIC,UAAU,GAAGR,GAAG,CAACQ,UAAU;MAE/B,IAAIR,GAAG,CAACS,EAAE,EAAE;QACV,IAAI,IAAI,CAAChC,MAAM,KAAK,MAAM,EAAE;UAC1B,MAAMK,IAAI,GAAG,MAAMkB,GAAG,CAACU,IAAI,EAAE;UAC7B,IAAI5B,IAAI,KAAK,EAAE,EAAE;YACf;UAAA,CACD,MAAM,IAAI,IAAI,CAACH,OAAO,CAACgC,GAAG,CAAC,QAAQ,CAAC,KAAK,UAAU,EAAE;YACpDN,IAAI,GAAGvB,IAAI;WACZ,MAAM,IACL,IAAI,CAACH,OAAO,CAACgC,GAAG,CAAC,QAAQ,CAAC,KAC1B,CAAA5B,EAAA,OAAI,CAACJ,OAAO,CAACgC,GAAG,CAAC,QAAQ,CAAC,cAAA5B,EAAA,uBAAAA,EAAA,CAAEe,QAAQ,CAAC,iCAAiC,CAAC,GACvE;YACAO,IAAI,GAAGvB,IAAI;WACZ,MAAM;YACLuB,IAAI,GAAGH,IAAI,CAACU,KAAK,CAAC9B,IAAI,CAAC;;;QAI3B,MAAM+B,WAAW,GAAG,CAAA3B,EAAA,OAAI,CAACP,OAAO,CAACgC,GAAG,CAAC,QAAQ,CAAC,cAAAzB,EAAA,uBAAAA,EAAA,CAAE4B,KAAK,CAAC,iCAAiC,CAAC;QACxF,MAAMC,YAAY,GAAG,CAAAC,EAAA,GAAAhB,GAAG,CAACrB,OAAO,CAACgC,GAAG,CAAC,eAAe,CAAC,cAAAK,EAAA,uBAAAA,EAAA,CAAEC,KAAK,CAAC,GAAG,CAAC;QACjE,IAAIJ,WAAW,IAAIE,YAAY,IAAIA,YAAY,CAACG,MAAM,GAAG,CAAC,EAAE;UAC1DZ,KAAK,GAAGa,QAAQ,CAACJ,YAAY,CAAC,CAAC,CAAC,CAAC;;QAGnC;QACA;QACA,IAAI,IAAI,CAAC9B,aAAa,IAAI,IAAI,CAACR,MAAM,KAAK,KAAK,IAAI2C,KAAK,CAACC,OAAO,CAAChB,IAAI,CAAC,EAAE;UACtE,IAAIA,IAAI,CAACa,MAAM,GAAG,CAAC,EAAE;YACnBd,KAAK,GAAG;cACN;cACAkB,IAAI,EAAE,UAAU;cAChBC,OAAO,EAAE,mBAAmBlB,IAAI,CAACa,MAAM,yDAAyD;cAChGM,IAAI,EAAE,IAAI;cACVC,OAAO,EAAE;aACV;YACDpB,IAAI,GAAG,IAAI;YACXC,KAAK,GAAG,IAAI;YACZC,MAAM,GAAG,GAAG;YACZC,UAAU,GAAG,gBAAgB;WAC9B,MAAM,IAAIH,IAAI,CAACa,MAAM,KAAK,CAAC,EAAE;YAC5Bb,IAAI,GAAGA,IAAI,CAAC,CAAC,CAAC;WACf,MAAM;YACLA,IAAI,GAAG,IAAI;;;OAGhB,MAAM;QACL,MAAMvB,IAAI,GAAG,MAAMkB,GAAG,CAACU,IAAI,EAAE;QAE7B,IAAI;UACFN,KAAK,GAAGF,IAAI,CAACU,KAAK,CAAC9B,IAAI,CAAC;UAExB;UACA,IAAIsC,KAAK,CAACC,OAAO,CAACjB,KAAK,CAAC,IAAIJ,GAAG,CAACO,MAAM,KAAK,GAAG,EAAE;YAC9CF,IAAI,GAAG,EAAE;YACTD,KAAK,GAAG,IAAI;YACZG,MAAM,GAAG,GAAG;YACZC,UAAU,GAAG,IAAI;;SAEpB,CAAC,OAAAkB,EAAA,EAAM;UACN;UACA,IAAI1B,GAAG,CAACO,MAAM,KAAK,GAAG,IAAIzB,IAAI,KAAK,EAAE,EAAE;YACrCyB,MAAM,GAAG,GAAG;YACZC,UAAU,GAAG,YAAY;WAC1B,MAAM;YACLJ,KAAK,GAAG;cACNqB,OAAO,EAAE3C;aACV;;;QAIL,IAAIsB,KAAK,IAAI,IAAI,CAACnB,aAAa,KAAI,CAAA0C,EAAA,GAAAvB,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEmB,OAAO,cAAAI,EAAA,uBAAAA,EAAA,CAAE7B,QAAQ,CAAC,QAAQ,CAAC,GAAE;UACrEM,KAAK,GAAG,IAAI;UACZG,MAAM,GAAG,GAAG;UACZC,UAAU,GAAG,IAAI;;QAGnB,IAAIJ,KAAK,IAAI,IAAI,CAAC5B,kBAAkB,EAAE;UACpC,MAAM,IAAIJ,gBAAA,CAAAgB,OAAc,CAACgB,KAAK,CAAC;;;MAInC,MAAMwB,iBAAiB,GAAG;QACxBxB,KAAK;QACLC,IAAI;QACJC,KAAK;QACLC,MAAM;QACNC;OACD;MAED,OAAOoB,iBAAiB;IAC1B,CAAC,CAAC;IACF,IAAI,CAAC,IAAI,CAACpD,kBAAkB,EAAE;MAC5BwB,GAAG,GAAGA,GAAG,CAAC6B,KAAK,CAAEC,UAAU,IAAI;;QAAC,OAAC;UAC/B1B,KAAK,EAAE;YACLqB,OAAO,EAAE,GAAG,CAAA1C,EAAA,GAAA+C,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEvC,IAAI,cAAAR,EAAA,cAAAA,EAAA,GAAI,YAAY,KAAK+C,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEL,OAAO,EAAE;YACtEF,OAAO,EAAE,GAAG,CAAArC,EAAA,GAAA4C,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEC,KAAK,cAAA7C,EAAA,cAAAA,EAAA,GAAI,EAAE,EAAE;YACrCsC,IAAI,EAAE,EAAE;YACRF,IAAI,EAAE,GAAG,CAAAN,EAAA,GAAAc,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAER,IAAI,cAAAN,EAAA,cAAAA,EAAA,GAAI,EAAE;WAChC;UACDX,IAAI,EAAE,IAAI;UACVC,KAAK,EAAE,IAAI;UACXC,MAAM,EAAE,CAAC;UACTC,UAAU,EAAE;SACb;OAAC,CAAC;;IAGL,OAAOR,GAAG,CAACN,IAAI,CAACC,WAAW,EAAEC,UAAU,CAAC;EAC1C;EAEA;;;;;;EAMAoC,OAAOA,CAAA;IAKL;IACA,OAAO,IAIN;EACH;EAEA;;;;;;;;;;;;;;;;;;;;;;EAsBAC,aAAaA,CAAA;IAaX,OAAO,IASN;EACH;;AA3RFC,OAAA,CAAA9C,OAAA,GAAAf,gBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}