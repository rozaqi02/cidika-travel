{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { DEFAULT_HEADERS } from '../lib/constants';\nimport { isStorageError } from '../lib/errors';\nimport { get, post, put, remove } from '../lib/fetch';\nimport { resolveFetch } from '../lib/helpers';\nexport default class StorageBucketApi {\n  constructor(url, headers = {}, fetch, opts) {\n    this.shouldThrowOnError = false;\n    const baseUrl = new URL(url);\n    // if legacy uri is used, replace with new storage host (disables request buffering to allow > 50GB uploads)\n    // \"project-ref.supabase.co\" becomes \"project-ref.storage.supabase.co\"\n    if (opts === null || opts === void 0 ? void 0 : opts.useNewHostname) {\n      const isSupabaseHost = /supabase\\.(co|in|red)$/.test(baseUrl.hostname);\n      if (isSupabaseHost && !baseUrl.hostname.includes('storage.supabase.')) {\n        baseUrl.hostname = baseUrl.hostname.replace('supabase.', 'storage.supabase.');\n      }\n    }\n    this.url = baseUrl.href;\n    this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n    this.fetch = resolveFetch(fetch);\n  }\n  /**\r\n   * Enable throwing errors instead of returning them.\r\n   */\n  throwOnError() {\n    this.shouldThrowOnError = true;\n    return this;\n  }\n  /**\r\n   * Retrieves the details of all Storage buckets within an existing project.\r\n   */\n  listBuckets() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield get(this.fetch, `${this.url}/bucket`, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * Retrieves the details of an existing Storage bucket.\r\n   *\r\n   * @param id The unique identifier of the bucket you would like to retrieve.\r\n   */\n  getBucket(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield get(this.fetch, `${this.url}/bucket/${id}`, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * Creates a new Storage bucket\r\n   *\r\n   * @param id A unique identifier for the bucket you are creating.\r\n   * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations. By default, buckets are private.\r\n   * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.\r\n   * The global file size limit takes precedence over this value.\r\n   * The default value is null, which doesn't set a per bucket file size limit.\r\n   * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.\r\n   * The default value is null, which allows files with all mime types to be uploaded.\r\n   * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.\r\n   * @returns newly created bucket id\r\n   * @param options.type (private-beta) specifies the bucket type. see `BucketType` for more details.\r\n   *   - default bucket type is `STANDARD`\r\n   */\n  createBucket(id, options = {\n    public: false\n  }) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/bucket`, {\n          id,\n          name: id,\n          type: options.type,\n          public: options.public,\n          file_size_limit: options.fileSizeLimit,\n          allowed_mime_types: options.allowedMimeTypes\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * Updates a Storage bucket\r\n   *\r\n   * @param id A unique identifier for the bucket you are updating.\r\n   * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations.\r\n   * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.\r\n   * The global file size limit takes precedence over this value.\r\n   * The default value is null, which doesn't set a per bucket file size limit.\r\n   * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.\r\n   * The default value is null, which allows files with all mime types to be uploaded.\r\n   * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.\r\n   */\n  updateBucket(id, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield put(this.fetch, `${this.url}/bucket/${id}`, {\n          id,\n          name: id,\n          public: options.public,\n          file_size_limit: options.fileSizeLimit,\n          allowed_mime_types: options.allowedMimeTypes\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * Removes all objects inside a single bucket.\r\n   *\r\n   * @param id The unique identifier of the bucket you would like to empty.\r\n   */\n  emptyBucket(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/bucket/${id}/empty`, {}, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.\r\n   * You must first `empty()` the bucket.\r\n   *\r\n   * @param id The unique identifier of the bucket you would like to delete.\r\n   */\n  deleteBucket(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield remove(this.fetch, `${this.url}/bucket/${id}`, {}, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n}","map":{"version":3,"names":["DEFAULT_HEADERS","isStorageError","get","post","put","remove","resolveFetch","StorageBucketApi","constructor","url","headers","fetch","opts","shouldThrowOnError","baseUrl","URL","useNewHostname","isSupabaseHost","test","hostname","includes","replace","href","Object","assign","throwOnError","listBuckets","data","error","getBucket","id","createBucket","options","public","name","type","file_size_limit","fileSizeLimit","allowed_mime_types","allowedMimeTypes","updateBucket","emptyBucket","deleteBucket"],"sources":["C:\\projects\\cidika-travel\\node_modules\\@supabase\\storage-js\\src\\packages\\StorageBucketApi.ts"],"sourcesContent":["import { DEFAULT_HEADERS } from '../lib/constants'\r\nimport { isStorageError, StorageError } from '../lib/errors'\r\nimport { Fetch, get, post, put, remove } from '../lib/fetch'\r\nimport { resolveFetch } from '../lib/helpers'\r\nimport { Bucket, BucketType } from '../lib/types'\r\nimport { StorageClientOptions } from '../StorageClient'\r\n\r\nexport default class StorageBucketApi {\r\n  protected url: string\r\n  protected headers: { [key: string]: string }\r\n  protected fetch: Fetch\r\n  protected shouldThrowOnError = false\r\n\r\n  constructor(\r\n    url: string,\r\n    headers: { [key: string]: string } = {},\r\n    fetch?: Fetch,\r\n    opts?: StorageClientOptions\r\n  ) {\r\n    const baseUrl = new URL(url)\r\n\r\n    // if legacy uri is used, replace with new storage host (disables request buffering to allow > 50GB uploads)\r\n    // \"project-ref.supabase.co\" becomes \"project-ref.storage.supabase.co\"\r\n    if (opts?.useNewHostname) {\r\n      const isSupabaseHost = /supabase\\.(co|in|red)$/.test(baseUrl.hostname)\r\n      if (isSupabaseHost && !baseUrl.hostname.includes('storage.supabase.')) {\r\n        baseUrl.hostname = baseUrl.hostname.replace('supabase.', 'storage.supabase.')\r\n      }\r\n    }\r\n\r\n    this.url = baseUrl.href\r\n    this.headers = { ...DEFAULT_HEADERS, ...headers }\r\n    this.fetch = resolveFetch(fetch)\r\n  }\r\n\r\n  /**\r\n   * Enable throwing errors instead of returning them.\r\n   */\r\n  public throwOnError(): this {\r\n    this.shouldThrowOnError = true\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Retrieves the details of all Storage buckets within an existing project.\r\n   */\r\n  async listBuckets(): Promise<\r\n    | {\r\n        data: Bucket[]\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await get(this.fetch, `${this.url}/bucket`, { headers: this.headers })\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (this.shouldThrowOnError) {\r\n        throw error\r\n      }\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves the details of an existing Storage bucket.\r\n   *\r\n   * @param id The unique identifier of the bucket you would like to retrieve.\r\n   */\r\n  async getBucket(\r\n    id: string\r\n  ): Promise<\r\n    | {\r\n        data: Bucket\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await get(this.fetch, `${this.url}/bucket/${id}`, { headers: this.headers })\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (this.shouldThrowOnError) {\r\n        throw error\r\n      }\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a new Storage bucket\r\n   *\r\n   * @param id A unique identifier for the bucket you are creating.\r\n   * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations. By default, buckets are private.\r\n   * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.\r\n   * The global file size limit takes precedence over this value.\r\n   * The default value is null, which doesn't set a per bucket file size limit.\r\n   * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.\r\n   * The default value is null, which allows files with all mime types to be uploaded.\r\n   * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.\r\n   * @returns newly created bucket id\r\n   * @param options.type (private-beta) specifies the bucket type. see `BucketType` for more details.\r\n   *   - default bucket type is `STANDARD`\r\n   */\r\n  async createBucket(\r\n    id: string,\r\n    options: {\r\n      public: boolean\r\n      fileSizeLimit?: number | string | null\r\n      allowedMimeTypes?: string[] | null\r\n      type?: BucketType\r\n    } = {\r\n      public: false,\r\n    }\r\n  ): Promise<\r\n    | {\r\n        data: Pick<Bucket, 'name'>\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await post(\r\n        this.fetch,\r\n        `${this.url}/bucket`,\r\n        {\r\n          id,\r\n          name: id,\r\n          type: options.type,\r\n          public: options.public,\r\n          file_size_limit: options.fileSizeLimit,\r\n          allowed_mime_types: options.allowedMimeTypes,\r\n        },\r\n        { headers: this.headers }\r\n      )\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (this.shouldThrowOnError) {\r\n        throw error\r\n      }\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates a Storage bucket\r\n   *\r\n   * @param id A unique identifier for the bucket you are updating.\r\n   * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations.\r\n   * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.\r\n   * The global file size limit takes precedence over this value.\r\n   * The default value is null, which doesn't set a per bucket file size limit.\r\n   * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.\r\n   * The default value is null, which allows files with all mime types to be uploaded.\r\n   * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.\r\n   */\r\n  async updateBucket(\r\n    id: string,\r\n    options: {\r\n      public: boolean\r\n      fileSizeLimit?: number | string | null\r\n      allowedMimeTypes?: string[] | null\r\n    }\r\n  ): Promise<\r\n    | {\r\n        data: { message: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await put(\r\n        this.fetch,\r\n        `${this.url}/bucket/${id}`,\r\n        {\r\n          id,\r\n          name: id,\r\n          public: options.public,\r\n          file_size_limit: options.fileSizeLimit,\r\n          allowed_mime_types: options.allowedMimeTypes,\r\n        },\r\n        { headers: this.headers }\r\n      )\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (this.shouldThrowOnError) {\r\n        throw error\r\n      }\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes all objects inside a single bucket.\r\n   *\r\n   * @param id The unique identifier of the bucket you would like to empty.\r\n   */\r\n  async emptyBucket(\r\n    id: string\r\n  ): Promise<\r\n    | {\r\n        data: { message: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await post(\r\n        this.fetch,\r\n        `${this.url}/bucket/${id}/empty`,\r\n        {},\r\n        { headers: this.headers }\r\n      )\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (this.shouldThrowOnError) {\r\n        throw error\r\n      }\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.\r\n   * You must first `empty()` the bucket.\r\n   *\r\n   * @param id The unique identifier of the bucket you would like to delete.\r\n   */\r\n  async deleteBucket(\r\n    id: string\r\n  ): Promise<\r\n    | {\r\n        data: { message: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await remove(\r\n        this.fetch,\r\n        `${this.url}/bucket/${id}`,\r\n        {},\r\n        { headers: this.headers }\r\n      )\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (this.shouldThrowOnError) {\r\n        throw error\r\n      }\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}