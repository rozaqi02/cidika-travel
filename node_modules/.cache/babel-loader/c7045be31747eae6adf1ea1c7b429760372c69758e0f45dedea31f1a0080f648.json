{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst PostgrestBuilder_1 = __importDefault(require(\"./PostgrestBuilder\"));\nclass PostgrestTransformBuilder extends PostgrestBuilder_1.default {\n  /**\r\n   * Perform a SELECT on the query result.\r\n   *\r\n   * By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not\r\n   * return modified rows. By calling this method, modified rows are returned in\r\n   * `data`.\r\n   *\r\n   * @param columns - The columns to retrieve, separated by commas\r\n   */\n  select(columns) {\n    // Remove whitespaces except when quoted\n    let quoted = false;\n    const cleanedColumns = (columns !== null && columns !== void 0 ? columns : '*').split('').map(c => {\n      if (/\\s/.test(c) && !quoted) {\n        return '';\n      }\n      if (c === '\"') {\n        quoted = !quoted;\n      }\n      return c;\n    }).join('');\n    this.url.searchParams.set('select', cleanedColumns);\n    this.headers.append('Prefer', 'return=representation');\n    return this;\n  }\n  /**\r\n   * Order the query result by `column`.\r\n   *\r\n   * You can call this method multiple times to order by multiple columns.\r\n   *\r\n   * You can order referenced tables, but it only affects the ordering of the\r\n   * parent table if you use `!inner` in the query.\r\n   *\r\n   * @param column - The column to order by\r\n   * @param options - Named parameters\r\n   * @param options.ascending - If `true`, the result will be in ascending order\r\n   * @param options.nullsFirst - If `true`, `null`s appear first. If `false`,\r\n   * `null`s appear last.\r\n   * @param options.referencedTable - Set this to order a referenced table by\r\n   * its columns\r\n   * @param options.foreignTable - Deprecated, use `options.referencedTable`\r\n   * instead\r\n   */\n  order(column, {\n    ascending = true,\n    nullsFirst,\n    foreignTable,\n    referencedTable = foreignTable\n  } = {}) {\n    const key = referencedTable ? `${referencedTable}.order` : 'order';\n    const existingOrder = this.url.searchParams.get(key);\n    this.url.searchParams.set(key, `${existingOrder ? `${existingOrder},` : ''}${column}.${ascending ? 'asc' : 'desc'}${nullsFirst === undefined ? '' : nullsFirst ? '.nullsfirst' : '.nullslast'}`);\n    return this;\n  }\n  /**\r\n   * Limit the query result by `count`.\r\n   *\r\n   * @param count - The maximum number of rows to return\r\n   * @param options - Named parameters\r\n   * @param options.referencedTable - Set this to limit rows of referenced\r\n   * tables instead of the parent table\r\n   * @param options.foreignTable - Deprecated, use `options.referencedTable`\r\n   * instead\r\n   */\n  limit(count, {\n    foreignTable,\n    referencedTable = foreignTable\n  } = {}) {\n    const key = typeof referencedTable === 'undefined' ? 'limit' : `${referencedTable}.limit`;\n    this.url.searchParams.set(key, `${count}`);\n    return this;\n  }\n  /**\r\n   * Limit the query result by starting at an offset `from` and ending at the offset `to`.\r\n   * Only records within this range are returned.\r\n   * This respects the query order and if there is no order clause the range could behave unexpectedly.\r\n   * The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third\r\n   * and fourth rows of the query.\r\n   *\r\n   * @param from - The starting index from which to limit the result\r\n   * @param to - The last index to which to limit the result\r\n   * @param options - Named parameters\r\n   * @param options.referencedTable - Set this to limit rows of referenced\r\n   * tables instead of the parent table\r\n   * @param options.foreignTable - Deprecated, use `options.referencedTable`\r\n   * instead\r\n   */\n  range(from, to, {\n    foreignTable,\n    referencedTable = foreignTable\n  } = {}) {\n    const keyOffset = typeof referencedTable === 'undefined' ? 'offset' : `${referencedTable}.offset`;\n    const keyLimit = typeof referencedTable === 'undefined' ? 'limit' : `${referencedTable}.limit`;\n    this.url.searchParams.set(keyOffset, `${from}`);\n    // Range is inclusive, so add 1\n    this.url.searchParams.set(keyLimit, `${to - from + 1}`);\n    return this;\n  }\n  /**\r\n   * Set the AbortSignal for the fetch request.\r\n   *\r\n   * @param signal - The AbortSignal to use for the fetch request\r\n   */\n  abortSignal(signal) {\n    this.signal = signal;\n    return this;\n  }\n  /**\r\n   * Return `data` as a single object instead of an array of objects.\r\n   *\r\n   * Query result must be one row (e.g. using `.limit(1)`), otherwise this\r\n   * returns an error.\r\n   */\n  single() {\n    this.headers.set('Accept', 'application/vnd.pgrst.object+json');\n    return this;\n  }\n  /**\r\n   * Return `data` as a single object instead of an array of objects.\r\n   *\r\n   * Query result must be zero or one row (e.g. using `.limit(1)`), otherwise\r\n   * this returns an error.\r\n   */\n  maybeSingle() {\n    // Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361\n    // Issue persists e.g. for `.insert([...]).select().maybeSingle()`\n    if (this.method === 'GET') {\n      this.headers.set('Accept', 'application/json');\n    } else {\n      this.headers.set('Accept', 'application/vnd.pgrst.object+json');\n    }\n    this.isMaybeSingle = true;\n    return this;\n  }\n  /**\r\n   * Return `data` as a string in CSV format.\r\n   */\n  csv() {\n    this.headers.set('Accept', 'text/csv');\n    return this;\n  }\n  /**\r\n   * Return `data` as an object in [GeoJSON](https://geojson.org) format.\r\n   */\n  geojson() {\n    this.headers.set('Accept', 'application/geo+json');\n    return this;\n  }\n  /**\r\n   * Return `data` as the EXPLAIN plan for the query.\r\n   *\r\n   * You need to enable the\r\n   * [db_plan_enabled](https://supabase.com/docs/guides/database/debugging-performance#enabling-explain)\r\n   * setting before using this method.\r\n   *\r\n   * @param options - Named parameters\r\n   *\r\n   * @param options.analyze - If `true`, the query will be executed and the\r\n   * actual run time will be returned\r\n   *\r\n   * @param options.verbose - If `true`, the query identifier will be returned\r\n   * and `data` will include the output columns of the query\r\n   *\r\n   * @param options.settings - If `true`, include information on configuration\r\n   * parameters that affect query planning\r\n   *\r\n   * @param options.buffers - If `true`, include information on buffer usage\r\n   *\r\n   * @param options.wal - If `true`, include information on WAL record generation\r\n   *\r\n   * @param options.format - The format of the output, can be `\"text\"` (default)\r\n   * or `\"json\"`\r\n   */\n  explain({\n    analyze = false,\n    verbose = false,\n    settings = false,\n    buffers = false,\n    wal = false,\n    format = 'text'\n  } = {}) {\n    var _a;\n    const options = [analyze ? 'analyze' : null, verbose ? 'verbose' : null, settings ? 'settings' : null, buffers ? 'buffers' : null, wal ? 'wal' : null].filter(Boolean).join('|');\n    // An Accept header can carry multiple media types but postgrest-js always sends one\n    const forMediatype = (_a = this.headers.get('Accept')) !== null && _a !== void 0 ? _a : 'application/json';\n    this.headers.set('Accept', `application/vnd.pgrst.plan+${format}; for=\"${forMediatype}\"; options=${options};`);\n    if (format === 'json') {\n      return this;\n    } else {\n      return this;\n    }\n  }\n  /**\r\n   * Rollback the query.\r\n   *\r\n   * `data` will still be returned, but the query is not committed.\r\n   */\n  rollback() {\n    this.headers.append('Prefer', 'tx=rollback');\n    return this;\n  }\n  /**\r\n   * Override the type of the returned `data`.\r\n   *\r\n   * @typeParam NewResult - The new result type to override with\r\n   * @deprecated Use overrideTypes<yourType, { merge: false }>() method at the end of your call chain instead\r\n   */\n  returns() {\n    return this;\n  }\n  /**\r\n   * Set the maximum number of rows that can be affected by the query.\r\n   * Only available in PostgREST v13+ and only works with PATCH and DELETE methods.\r\n   *\r\n   * @param value - The maximum number of rows that can be affected\r\n   */\n  maxAffected(value) {\n    this.headers.append('Prefer', 'handling=strict');\n    this.headers.append('Prefer', `max-affected=${value}`);\n    return this;\n  }\n}\nexports.default = PostgrestTransformBuilder;","map":{"version":3,"names":["PostgrestBuilder_1","__importDefault","require","PostgrestTransformBuilder","default","select","columns","quoted","cleanedColumns","split","map","c","test","join","url","searchParams","set","headers","append","order","column","ascending","nullsFirst","foreignTable","referencedTable","key","existingOrder","get","undefined","limit","count","range","from","to","keyOffset","keyLimit","abortSignal","signal","single","maybeSingle","method","isMaybeSingle","csv","geojson","explain","analyze","verbose","settings","buffers","wal","format","options","filter","Boolean","forMediatype","_a","rollback","returns","maxAffected","value","exports"],"sources":["C:\\projects\\cidika-travel\\node_modules\\@supabase\\postgrest-js\\src\\PostgrestTransformBuilder.ts"],"sourcesContent":["import PostgrestBuilder from './PostgrestBuilder'\r\nimport { InvalidMethodError } from './PostgrestFilterBuilder'\r\nimport { GetResult } from './select-query-parser/result'\r\nimport {\r\n  GenericSchema,\r\n  CheckMatchingArrayTypes,\r\n  ClientServerOptions,\r\n  MaxAffectedEnabled,\r\n} from './types'\r\n\r\nexport default class PostgrestTransformBuilder<\r\n  ClientOptions extends ClientServerOptions,\r\n  Schema extends GenericSchema,\r\n  Row extends Record<string, unknown>,\r\n  Result,\r\n  RelationName = unknown,\r\n  Relationships = unknown,\r\n  Method = unknown\r\n> extends PostgrestBuilder<ClientOptions, Result> {\r\n  /**\r\n   * Perform a SELECT on the query result.\r\n   *\r\n   * By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not\r\n   * return modified rows. By calling this method, modified rows are returned in\r\n   * `data`.\r\n   *\r\n   * @param columns - The columns to retrieve, separated by commas\r\n   */\r\n  select<\r\n    Query extends string = '*',\r\n    NewResultOne = GetResult<Schema, Row, RelationName, Relationships, Query, ClientOptions>\r\n  >(\r\n    columns?: Query\r\n  ): PostgrestTransformBuilder<\r\n    ClientOptions,\r\n    Schema,\r\n    Row,\r\n    NewResultOne[],\r\n    RelationName,\r\n    Relationships,\r\n    Method\r\n  > {\r\n    // Remove whitespaces except when quoted\r\n    let quoted = false\r\n    const cleanedColumns = (columns ?? '*')\r\n      .split('')\r\n      .map((c) => {\r\n        if (/\\s/.test(c) && !quoted) {\r\n          return ''\r\n        }\r\n        if (c === '\"') {\r\n          quoted = !quoted\r\n        }\r\n        return c\r\n      })\r\n      .join('')\r\n    this.url.searchParams.set('select', cleanedColumns)\r\n    this.headers.append('Prefer', 'return=representation')\r\n    return this as unknown as PostgrestTransformBuilder<\r\n      ClientOptions,\r\n      Schema,\r\n      Row,\r\n      NewResultOne[],\r\n      RelationName,\r\n      Relationships,\r\n      Method\r\n    >\r\n  }\r\n\r\n  order<ColumnName extends string & keyof Row>(\r\n    column: ColumnName,\r\n    options?: { ascending?: boolean; nullsFirst?: boolean; referencedTable?: undefined }\r\n  ): this\r\n  order(\r\n    column: string,\r\n    options?: { ascending?: boolean; nullsFirst?: boolean; referencedTable?: string }\r\n  ): this\r\n  /**\r\n   * @deprecated Use `options.referencedTable` instead of `options.foreignTable`\r\n   */\r\n  order<ColumnName extends string & keyof Row>(\r\n    column: ColumnName,\r\n    options?: { ascending?: boolean; nullsFirst?: boolean; foreignTable?: undefined }\r\n  ): this\r\n  /**\r\n   * @deprecated Use `options.referencedTable` instead of `options.foreignTable`\r\n   */\r\n  order(\r\n    column: string,\r\n    options?: { ascending?: boolean; nullsFirst?: boolean; foreignTable?: string }\r\n  ): this\r\n  /**\r\n   * Order the query result by `column`.\r\n   *\r\n   * You can call this method multiple times to order by multiple columns.\r\n   *\r\n   * You can order referenced tables, but it only affects the ordering of the\r\n   * parent table if you use `!inner` in the query.\r\n   *\r\n   * @param column - The column to order by\r\n   * @param options - Named parameters\r\n   * @param options.ascending - If `true`, the result will be in ascending order\r\n   * @param options.nullsFirst - If `true`, `null`s appear first. If `false`,\r\n   * `null`s appear last.\r\n   * @param options.referencedTable - Set this to order a referenced table by\r\n   * its columns\r\n   * @param options.foreignTable - Deprecated, use `options.referencedTable`\r\n   * instead\r\n   */\r\n  order(\r\n    column: string,\r\n    {\r\n      ascending = true,\r\n      nullsFirst,\r\n      foreignTable,\r\n      referencedTable = foreignTable,\r\n    }: {\r\n      ascending?: boolean\r\n      nullsFirst?: boolean\r\n      foreignTable?: string\r\n      referencedTable?: string\r\n    } = {}\r\n  ): this {\r\n    const key = referencedTable ? `${referencedTable}.order` : 'order'\r\n    const existingOrder = this.url.searchParams.get(key)\r\n\r\n    this.url.searchParams.set(\r\n      key,\r\n      `${existingOrder ? `${existingOrder},` : ''}${column}.${ascending ? 'asc' : 'desc'}${\r\n        nullsFirst === undefined ? '' : nullsFirst ? '.nullsfirst' : '.nullslast'\r\n      }`\r\n    )\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Limit the query result by `count`.\r\n   *\r\n   * @param count - The maximum number of rows to return\r\n   * @param options - Named parameters\r\n   * @param options.referencedTable - Set this to limit rows of referenced\r\n   * tables instead of the parent table\r\n   * @param options.foreignTable - Deprecated, use `options.referencedTable`\r\n   * instead\r\n   */\r\n  limit(\r\n    count: number,\r\n    {\r\n      foreignTable,\r\n      referencedTable = foreignTable,\r\n    }: { foreignTable?: string; referencedTable?: string } = {}\r\n  ): this {\r\n    const key = typeof referencedTable === 'undefined' ? 'limit' : `${referencedTable}.limit`\r\n    this.url.searchParams.set(key, `${count}`)\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Limit the query result by starting at an offset `from` and ending at the offset `to`.\r\n   * Only records within this range are returned.\r\n   * This respects the query order and if there is no order clause the range could behave unexpectedly.\r\n   * The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third\r\n   * and fourth rows of the query.\r\n   *\r\n   * @param from - The starting index from which to limit the result\r\n   * @param to - The last index to which to limit the result\r\n   * @param options - Named parameters\r\n   * @param options.referencedTable - Set this to limit rows of referenced\r\n   * tables instead of the parent table\r\n   * @param options.foreignTable - Deprecated, use `options.referencedTable`\r\n   * instead\r\n   */\r\n  range(\r\n    from: number,\r\n    to: number,\r\n    {\r\n      foreignTable,\r\n      referencedTable = foreignTable,\r\n    }: { foreignTable?: string; referencedTable?: string } = {}\r\n  ): this {\r\n    const keyOffset =\r\n      typeof referencedTable === 'undefined' ? 'offset' : `${referencedTable}.offset`\r\n    const keyLimit = typeof referencedTable === 'undefined' ? 'limit' : `${referencedTable}.limit`\r\n    this.url.searchParams.set(keyOffset, `${from}`)\r\n    // Range is inclusive, so add 1\r\n    this.url.searchParams.set(keyLimit, `${to - from + 1}`)\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Set the AbortSignal for the fetch request.\r\n   *\r\n   * @param signal - The AbortSignal to use for the fetch request\r\n   */\r\n  abortSignal(signal: AbortSignal): this {\r\n    this.signal = signal\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Return `data` as a single object instead of an array of objects.\r\n   *\r\n   * Query result must be one row (e.g. using `.limit(1)`), otherwise this\r\n   * returns an error.\r\n   */\r\n  single<ResultOne = Result extends (infer ResultOne)[] ? ResultOne : never>(): PostgrestBuilder<\r\n    ClientOptions,\r\n    ResultOne\r\n  > {\r\n    this.headers.set('Accept', 'application/vnd.pgrst.object+json')\r\n    return this as unknown as PostgrestBuilder<ClientOptions, ResultOne>\r\n  }\r\n\r\n  /**\r\n   * Return `data` as a single object instead of an array of objects.\r\n   *\r\n   * Query result must be zero or one row (e.g. using `.limit(1)`), otherwise\r\n   * this returns an error.\r\n   */\r\n  maybeSingle<\r\n    ResultOne = Result extends (infer ResultOne)[] ? ResultOne : never\r\n  >(): PostgrestBuilder<ClientOptions, ResultOne | null> {\r\n    // Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361\r\n    // Issue persists e.g. for `.insert([...]).select().maybeSingle()`\r\n    if (this.method === 'GET') {\r\n      this.headers.set('Accept', 'application/json')\r\n    } else {\r\n      this.headers.set('Accept', 'application/vnd.pgrst.object+json')\r\n    }\r\n    this.isMaybeSingle = true\r\n    return this as unknown as PostgrestBuilder<ClientOptions, ResultOne | null>\r\n  }\r\n\r\n  /**\r\n   * Return `data` as a string in CSV format.\r\n   */\r\n  csv(): PostgrestBuilder<ClientOptions, string> {\r\n    this.headers.set('Accept', 'text/csv')\r\n    return this as unknown as PostgrestBuilder<ClientOptions, string>\r\n  }\r\n\r\n  /**\r\n   * Return `data` as an object in [GeoJSON](https://geojson.org) format.\r\n   */\r\n  geojson(): PostgrestBuilder<ClientOptions, Record<string, unknown>> {\r\n    this.headers.set('Accept', 'application/geo+json')\r\n    return this as unknown as PostgrestBuilder<ClientOptions, Record<string, unknown>>\r\n  }\r\n\r\n  /**\r\n   * Return `data` as the EXPLAIN plan for the query.\r\n   *\r\n   * You need to enable the\r\n   * [db_plan_enabled](https://supabase.com/docs/guides/database/debugging-performance#enabling-explain)\r\n   * setting before using this method.\r\n   *\r\n   * @param options - Named parameters\r\n   *\r\n   * @param options.analyze - If `true`, the query will be executed and the\r\n   * actual run time will be returned\r\n   *\r\n   * @param options.verbose - If `true`, the query identifier will be returned\r\n   * and `data` will include the output columns of the query\r\n   *\r\n   * @param options.settings - If `true`, include information on configuration\r\n   * parameters that affect query planning\r\n   *\r\n   * @param options.buffers - If `true`, include information on buffer usage\r\n   *\r\n   * @param options.wal - If `true`, include information on WAL record generation\r\n   *\r\n   * @param options.format - The format of the output, can be `\"text\"` (default)\r\n   * or `\"json\"`\r\n   */\r\n  explain({\r\n    analyze = false,\r\n    verbose = false,\r\n    settings = false,\r\n    buffers = false,\r\n    wal = false,\r\n    format = 'text',\r\n  }: {\r\n    analyze?: boolean\r\n    verbose?: boolean\r\n    settings?: boolean\r\n    buffers?: boolean\r\n    wal?: boolean\r\n    format?: 'json' | 'text'\r\n  } = {}) {\r\n    const options = [\r\n      analyze ? 'analyze' : null,\r\n      verbose ? 'verbose' : null,\r\n      settings ? 'settings' : null,\r\n      buffers ? 'buffers' : null,\r\n      wal ? 'wal' : null,\r\n    ]\r\n      .filter(Boolean)\r\n      .join('|')\r\n    // An Accept header can carry multiple media types but postgrest-js always sends one\r\n    const forMediatype = this.headers.get('Accept') ?? 'application/json'\r\n    this.headers.set(\r\n      'Accept',\r\n      `application/vnd.pgrst.plan+${format}; for=\"${forMediatype}\"; options=${options};`\r\n    )\r\n    if (format === 'json') {\r\n      return this as unknown as PostgrestBuilder<ClientOptions, Record<string, unknown>[]>\r\n    } else {\r\n      return this as unknown as PostgrestBuilder<ClientOptions, string>\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Rollback the query.\r\n   *\r\n   * `data` will still be returned, but the query is not committed.\r\n   */\r\n  rollback(): this {\r\n    this.headers.append('Prefer', 'tx=rollback')\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Override the type of the returned `data`.\r\n   *\r\n   * @typeParam NewResult - The new result type to override with\r\n   * @deprecated Use overrideTypes<yourType, { merge: false }>() method at the end of your call chain instead\r\n   */\r\n  returns<NewResult>(): PostgrestTransformBuilder<\r\n    ClientOptions,\r\n    Schema,\r\n    Row,\r\n    CheckMatchingArrayTypes<Result, NewResult>,\r\n    RelationName,\r\n    Relationships,\r\n    Method\r\n  > {\r\n    return this as unknown as PostgrestTransformBuilder<\r\n      ClientOptions,\r\n      Schema,\r\n      Row,\r\n      CheckMatchingArrayTypes<Result, NewResult>,\r\n      RelationName,\r\n      Relationships,\r\n      Method\r\n    >\r\n  }\r\n\r\n  /**\r\n   * Set the maximum number of rows that can be affected by the query.\r\n   * Only available in PostgREST v13+ and only works with PATCH and DELETE methods.\r\n   *\r\n   * @param value - The maximum number of rows that can be affected\r\n   */\r\n  maxAffected(value: number): MaxAffectedEnabled<ClientOptions['PostgrestVersion']> extends true\r\n    ? // TODO: update the RPC case to only work on RPC that returns SETOF rows\r\n      Method extends 'PATCH' | 'DELETE' | 'RPC'\r\n      ? this\r\n      : InvalidMethodError<'maxAffected method only available on update or delete'>\r\n    : InvalidMethodError<'maxAffected method only available on postgrest 13+'> {\r\n    this.headers.append('Prefer', 'handling=strict')\r\n    this.headers.append('Prefer', `max-affected=${value}`)\r\n    return this as unknown as MaxAffectedEnabled<ClientOptions['PostgrestVersion']> extends true\r\n      ? Method extends 'PATCH' | 'DELETE' | 'RPC'\r\n        ? this\r\n        : InvalidMethodError<'maxAffected method only available on update or delete'>\r\n      : InvalidMethodError<'maxAffected method only available on postgrest 13+'>\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}