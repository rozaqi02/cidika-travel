{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/usePageSections.js\nimport { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { supabase } from \"../lib/supabaseClient.js\";\n\n/**\r\n * Ambil konten kustom per-halaman dari:\r\n * - page_sections\r\n * - page_section_locales (join semua bahasa)\r\n */\nexport default function usePageSections(page, {\n  live = true\n} = {}) {\n  _s();\n  const {\n    i18n\n  } = useTranslation();\n  const lang = (i18n.resolvedLanguage || i18n.language || \"en\").split(\"-\")[0];\n  const [sections, setSections] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const fetchData = async () => {\n    setLoading(true);\n    setError(null);\n    const {\n      data,\n      error\n    } = await supabase.from(\"page_sections\").select(`\n        id, page, section_key, sort_index, data,\n        page_section_locales (*)\n      `).eq(\"page\", page).order(\"sort_index\", {\n      ascending: true\n    });\n    if (error) {\n      setError(error);\n      setSections([]);\n      setLoading(false);\n      return;\n    }\n    const mapped = (data || []).map(s => {\n      var _s$page_section_local, _s$page_section_local2, _s$page_section_local3;\n      const loc = ((_s$page_section_local = s.page_section_locales) === null || _s$page_section_local === void 0 ? void 0 : _s$page_section_local.find(l => l.lang === lang)) || ((_s$page_section_local2 = s.page_section_locales) === null || _s$page_section_local2 === void 0 ? void 0 : _s$page_section_local2.find(l => l.lang === \"en\")) || ((_s$page_section_local3 = s.page_section_locales) === null || _s$page_section_local3 === void 0 ? void 0 : _s$page_section_local3[0]) || null;\n      return {\n        ...s,\n        locale: loc\n      };\n    });\n    setSections(mapped);\n    setLoading(false);\n  };\n  useEffect(() => {\n    fetchData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [page, lang]);\n  useEffect(() => {\n    if (!live) return;\n    const channel = supabase.channel(`page_sections:${page}`).on(\"postgres_changes\", {\n      event: \"*\",\n      schema: \"public\",\n      table: \"page_sections\",\n      filter: `page=eq.${page}`\n    }, fetchData).on(\"postgres_changes\", {\n      event: \"*\",\n      schema: \"public\",\n      table: \"page_section_locales\"\n    }, fetchData).subscribe();\n    return () => {\n      supabase.removeChannel(channel);\n    };\n  }, [page, live]);\n  return {\n    sections,\n    loading,\n    error,\n    refetch: fetchData\n  };\n}\n_s(usePageSections, \"dxNYTIZ+l0alv6Gt/vj5pVG9A6I=\", false, function () {\n  return [useTranslation];\n});","map":{"version":3,"names":["useEffect","useState","useTranslation","supabase","usePageSections","page","live","_s","i18n","lang","resolvedLanguage","language","split","sections","setSections","loading","setLoading","error","setError","fetchData","data","from","select","eq","order","ascending","mapped","map","s","_s$page_section_local","_s$page_section_local2","_s$page_section_local3","loc","page_section_locales","find","l","locale","channel","on","event","schema","table","filter","subscribe","removeChannel","refetch"],"sources":["C:/projects/cidika-travel/src/hooks/usePageSections.js"],"sourcesContent":["// src/hooks/usePageSections.js\r\nimport { useEffect, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { supabase } from \"../lib/supabaseClient.js\";\r\n\r\n/**\r\n * Ambil konten kustom per-halaman dari:\r\n * - page_sections\r\n * - page_section_locales (join semua bahasa)\r\n */\r\nexport default function usePageSections(page, { live = true } = {}) {\r\n  const { i18n } = useTranslation();\r\n  const lang = (i18n.resolvedLanguage || i18n.language || \"en\").split(\"-\")[0];\r\n\r\n  const [sections, setSections] = useState([]);\r\n  const [loading, setLoading]   = useState(true);\r\n  const [error, setError]       = useState(null);\r\n\r\n  const fetchData = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    const { data, error } = await supabase\r\n      .from(\"page_sections\")\r\n      .select(`\r\n        id, page, section_key, sort_index, data,\r\n        page_section_locales (*)\r\n      `)\r\n      .eq(\"page\", page)\r\n      .order(\"sort_index\", { ascending: true });\r\n\r\n    if (error) {\r\n      setError(error);\r\n      setSections([]);\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    const mapped = (data || []).map((s) => {\r\n      const loc =\r\n        s.page_section_locales?.find((l) => l.lang === lang) ||\r\n        s.page_section_locales?.find((l) => l.lang === \"en\") ||\r\n        s.page_section_locales?.[0] ||\r\n        null;\r\n      return { ...s, locale: loc };\r\n    });\r\n\r\n    setSections(mapped);\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [page, lang]);\r\n\r\n  useEffect(() => {\r\n    if (!live) return;\r\n\r\n    const channel = supabase\r\n      .channel(`page_sections:${page}`)\r\n      .on(\r\n        \"postgres_changes\",\r\n        { event: \"*\", schema: \"public\", table: \"page_sections\", filter: `page=eq.${page}` },\r\n        fetchData\r\n      )\r\n      .on(\r\n        \"postgres_changes\",\r\n        { event: \"*\", schema: \"public\", table: \"page_section_locales\" },\r\n        fetchData\r\n      )\r\n      .subscribe();\r\n\r\n    return () => {\r\n      supabase.removeChannel(channel);\r\n    };\r\n  }, [page, live]);\r\n\r\n  return { sections, loading, error, refetch: fetchData };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}