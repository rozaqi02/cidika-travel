{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { StorageApiError, StorageUnknownError } from './errors';\nimport { isPlainObject, resolveResponse } from './helpers';\nconst _getErrorMessage = err => err.msg || err.message || err.error_description || err.error || JSON.stringify(err);\nconst handleError = (error, reject, options) => __awaiter(void 0, void 0, void 0, function* () {\n  const Res = yield resolveResponse();\n  if (error instanceof Res && !(options === null || options === void 0 ? void 0 : options.noResolveJson)) {\n    error.json().then(err => {\n      const status = error.status || 500;\n      const statusCode = (err === null || err === void 0 ? void 0 : err.statusCode) || status + '';\n      reject(new StorageApiError(_getErrorMessage(err), status, statusCode));\n    }).catch(err => {\n      reject(new StorageUnknownError(_getErrorMessage(err), err));\n    });\n  } else {\n    reject(new StorageUnknownError(_getErrorMessage(error), error));\n  }\n});\nconst _getRequestParams = (method, options, parameters, body) => {\n  const params = {\n    method,\n    headers: (options === null || options === void 0 ? void 0 : options.headers) || {}\n  };\n  if (method === 'GET' || !body) {\n    return params;\n  }\n  if (isPlainObject(body)) {\n    params.headers = Object.assign({\n      'Content-Type': 'application/json'\n    }, options === null || options === void 0 ? void 0 : options.headers);\n    params.body = JSON.stringify(body);\n  } else {\n    params.body = body;\n  }\n  if (options === null || options === void 0 ? void 0 : options.duplex) {\n    params.duplex = options.duplex;\n  }\n  return Object.assign(Object.assign({}, params), parameters);\n};\nfunction _handleRequest(fetcher, method, url, options, parameters, body) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return new Promise((resolve, reject) => {\n      fetcher(url, _getRequestParams(method, options, parameters, body)).then(result => {\n        if (!result.ok) throw result;\n        if (options === null || options === void 0 ? void 0 : options.noResolveJson) return result;\n        return result.json();\n      }).then(data => resolve(data)).catch(error => handleError(error, reject, options));\n    });\n  });\n}\nexport function get(fetcher, url, options, parameters) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return _handleRequest(fetcher, 'GET', url, options, parameters);\n  });\n}\nexport function post(fetcher, url, body, options, parameters) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return _handleRequest(fetcher, 'POST', url, options, parameters, body);\n  });\n}\nexport function put(fetcher, url, body, options, parameters) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return _handleRequest(fetcher, 'PUT', url, options, parameters, body);\n  });\n}\nexport function head(fetcher, url, options, parameters) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return _handleRequest(fetcher, 'HEAD', url, Object.assign(Object.assign({}, options), {\n      noResolveJson: true\n    }), parameters);\n  });\n}\nexport function remove(fetcher, url, body, options, parameters) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return _handleRequest(fetcher, 'DELETE', url, options, parameters, body);\n  });\n}","map":{"version":3,"names":["StorageApiError","StorageUnknownError","isPlainObject","resolveResponse","_getErrorMessage","err","msg","message","error_description","error","JSON","stringify","handleError","reject","options","__awaiter","Res","noResolveJson","json","then","status","statusCode","catch","_getRequestParams","method","parameters","body","params","headers","Object","assign","duplex","_handleRequest","fetcher","url","Promise","resolve","result","ok","data","get","post","put","head","remove"],"sources":["C:\\projects\\cidika-travel\\node_modules\\@supabase\\storage-js\\src\\lib\\fetch.ts"],"sourcesContent":["import { StorageApiError, StorageUnknownError } from './errors'\r\nimport { isPlainObject, resolveResponse } from './helpers'\r\nimport { FetchParameters } from './types'\r\n\r\nexport type Fetch = typeof fetch\r\n\r\nexport interface FetchOptions {\r\n  headers?: {\r\n    [key: string]: string\r\n  }\r\n  duplex?: string\r\n  noResolveJson?: boolean\r\n}\r\n\r\nexport type RequestMethodType = 'GET' | 'POST' | 'PUT' | 'DELETE' | 'HEAD'\r\n\r\nconst _getErrorMessage = (err: any): string =>\r\n  err.msg || err.message || err.error_description || err.error || JSON.stringify(err)\r\n\r\nconst handleError = async (\r\n  error: unknown,\r\n  reject: (reason?: any) => void,\r\n  options?: FetchOptions\r\n) => {\r\n  const Res = await resolveResponse()\r\n\r\n  if (error instanceof Res && !options?.noResolveJson) {\r\n    error\r\n      .json()\r\n      .then((err) => {\r\n        const status = error.status || 500\r\n        const statusCode = err?.statusCode || status + ''\r\n        reject(new StorageApiError(_getErrorMessage(err), status, statusCode))\r\n      })\r\n      .catch((err) => {\r\n        reject(new StorageUnknownError(_getErrorMessage(err), err))\r\n      })\r\n  } else {\r\n    reject(new StorageUnknownError(_getErrorMessage(error), error))\r\n  }\r\n}\r\n\r\nconst _getRequestParams = (\r\n  method: RequestMethodType,\r\n  options?: FetchOptions,\r\n  parameters?: FetchParameters,\r\n  body?: object\r\n) => {\r\n  const params: { [k: string]: any } = { method, headers: options?.headers || {} }\r\n\r\n  if (method === 'GET' || !body) {\r\n    return params\r\n  }\r\n\r\n  if (isPlainObject(body)) {\r\n    params.headers = { 'Content-Type': 'application/json', ...options?.headers }\r\n    params.body = JSON.stringify(body)\r\n  } else {\r\n    params.body = body\r\n  }\r\n\r\n  if (options?.duplex) {\r\n    params.duplex = options.duplex\r\n  }\r\n\r\n  return { ...params, ...parameters }\r\n}\r\n\r\nasync function _handleRequest(\r\n  fetcher: Fetch,\r\n  method: RequestMethodType,\r\n  url: string,\r\n  options?: FetchOptions,\r\n  parameters?: FetchParameters,\r\n  body?: object\r\n): Promise<any> {\r\n  return new Promise((resolve, reject) => {\r\n    fetcher(url, _getRequestParams(method, options, parameters, body))\r\n      .then((result) => {\r\n        if (!result.ok) throw result\r\n        if (options?.noResolveJson) return result\r\n        return result.json()\r\n      })\r\n      .then((data) => resolve(data))\r\n      .catch((error) => handleError(error, reject, options))\r\n  })\r\n}\r\n\r\nexport async function get(\r\n  fetcher: Fetch,\r\n  url: string,\r\n  options?: FetchOptions,\r\n  parameters?: FetchParameters\r\n): Promise<any> {\r\n  return _handleRequest(fetcher, 'GET', url, options, parameters)\r\n}\r\n\r\nexport async function post(\r\n  fetcher: Fetch,\r\n  url: string,\r\n  body: object,\r\n  options?: FetchOptions,\r\n  parameters?: FetchParameters\r\n): Promise<any> {\r\n  return _handleRequest(fetcher, 'POST', url, options, parameters, body)\r\n}\r\n\r\nexport async function put(\r\n  fetcher: Fetch,\r\n  url: string,\r\n  body: object,\r\n  options?: FetchOptions,\r\n  parameters?: FetchParameters\r\n): Promise<any> {\r\n  return _handleRequest(fetcher, 'PUT', url, options, parameters, body)\r\n}\r\n\r\nexport async function head(\r\n  fetcher: Fetch,\r\n  url: string,\r\n  options?: FetchOptions,\r\n  parameters?: FetchParameters\r\n): Promise<any> {\r\n  return _handleRequest(\r\n    fetcher,\r\n    'HEAD',\r\n    url,\r\n    {\r\n      ...options,\r\n      noResolveJson: true,\r\n    },\r\n    parameters\r\n  )\r\n}\r\n\r\nexport async function remove(\r\n  fetcher: Fetch,\r\n  url: string,\r\n  body: object,\r\n  options?: FetchOptions,\r\n  parameters?: FetchParameters\r\n): Promise<any> {\r\n  return _handleRequest(fetcher, 'DELETE', url, options, parameters, body)\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}