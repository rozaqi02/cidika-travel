{"ast":null,"code":"import WebSocketFactory from './lib/websocket-factory';\nimport { CHANNEL_EVENTS, CONNECTION_STATE, DEFAULT_VERSION, DEFAULT_TIMEOUT, SOCKET_STATES, TRANSPORTS, VSN, WS_CLOSE_NORMAL } from './lib/constants';\nimport Serializer from './lib/serializer';\nimport Timer from './lib/timer';\nimport { httpEndpointURL } from './lib/transformers';\nimport RealtimeChannel from './RealtimeChannel';\nconst noop = () => {};\n// Connection-related constants\nconst CONNECTION_TIMEOUTS = {\n  HEARTBEAT_INTERVAL: 25000,\n  RECONNECT_DELAY: 10,\n  HEARTBEAT_TIMEOUT_FALLBACK: 100\n};\nconst RECONNECT_INTERVALS = [1000, 2000, 5000, 10000];\nconst DEFAULT_RECONNECT_FALLBACK = 10000;\nconst WORKER_SCRIPT = `\n  addEventListener(\"message\", (e) => {\n    if (e.data.event === \"start\") {\n      setInterval(() => postMessage({ event: \"keepAlive\" }), e.data.interval);\n    }\n  });`;\nexport default class RealtimeClient {\n  /**\r\n   * Initializes the Socket.\r\n   *\r\n   * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\r\n   * @param httpEndpoint The string HTTP endpoint, ie, \"https://example.com\", \"/\" (inherited host & protocol)\r\n   * @param options.transport The Websocket Transport, for example WebSocket. This can be a custom implementation\r\n   * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\r\n   * @param options.params The optional params to pass when connecting.\r\n   * @param options.headers Deprecated: headers cannot be set on websocket connections and this option will be removed in the future.\r\n   * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\r\n   * @param options.heartbeatCallback The optional function to handle heartbeat status.\r\n   * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\r\n   * @param options.logLevel Sets the log level for Realtime\r\n   * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\r\n   * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\r\n   * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\r\n   * @param options.worker Use Web Worker to set a side flow. Defaults to false.\r\n   * @param options.workerUrl The URL of the worker script. Defaults to https://realtime.supabase.com/worker.js that includes a heartbeat event call to keep the connection alive.\r\n   */\n  constructor(endPoint, options) {\n    var _a;\n    this.accessTokenValue = null;\n    this.apiKey = null;\n    this.channels = new Array();\n    this.endPoint = '';\n    this.httpEndpoint = '';\n    /** @deprecated headers cannot be set on websocket connections */\n    this.headers = {};\n    this.params = {};\n    this.timeout = DEFAULT_TIMEOUT;\n    this.transport = null;\n    this.heartbeatIntervalMs = CONNECTION_TIMEOUTS.HEARTBEAT_INTERVAL;\n    this.heartbeatTimer = undefined;\n    this.pendingHeartbeatRef = null;\n    this.heartbeatCallback = noop;\n    this.ref = 0;\n    this.reconnectTimer = null;\n    this.logger = noop;\n    this.conn = null;\n    this.sendBuffer = [];\n    this.serializer = new Serializer();\n    this.stateChangeCallbacks = {\n      open: [],\n      close: [],\n      error: [],\n      message: []\n    };\n    this.accessToken = null;\n    this._connectionState = 'disconnected';\n    this._wasManualDisconnect = false;\n    this._authPromise = null;\n    /**\r\n     * Use either custom fetch, if provided, or default fetch to make HTTP requests\r\n     *\r\n     * @internal\r\n     */\n    this._resolveFetch = customFetch => {\n      let _fetch;\n      if (customFetch) {\n        _fetch = customFetch;\n      } else if (typeof fetch === 'undefined') {\n        // Node.js environment without native fetch\n        _fetch = (...args) => import('@supabase/node-fetch').then(({\n          default: fetch\n        }) => fetch(...args)).catch(error => {\n          throw new Error(`Failed to load @supabase/node-fetch: ${error.message}. ` + `This is required for HTTP requests in Node.js environments without native fetch.`);\n        });\n      } else {\n        _fetch = fetch;\n      }\n      return (...args) => _fetch(...args);\n    };\n    // Validate required parameters\n    if (!((_a = options === null || options === void 0 ? void 0 : options.params) === null || _a === void 0 ? void 0 : _a.apikey)) {\n      throw new Error('API key is required to connect to Realtime');\n    }\n    this.apiKey = options.params.apikey;\n    // Initialize endpoint URLs\n    this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`;\n    this.httpEndpoint = httpEndpointURL(endPoint);\n    this._initializeOptions(options);\n    this._setupReconnectionTimer();\n    this.fetch = this._resolveFetch(options === null || options === void 0 ? void 0 : options.fetch);\n  }\n  /**\r\n   * Connects the socket, unless already connected.\r\n   */\n  connect() {\n    // Skip if already connecting, disconnecting, or connected\n    if (this.isConnecting() || this.isDisconnecting() || this.conn !== null && this.isConnected()) {\n      return;\n    }\n    this._setConnectionState('connecting');\n    this._setAuthSafely('connect');\n    // Establish WebSocket connection\n    if (this.transport) {\n      // Use custom transport if provided\n      this.conn = new this.transport(this.endpointURL());\n    } else {\n      // Try to use native WebSocket\n      try {\n        this.conn = WebSocketFactory.createWebSocket(this.endpointURL());\n      } catch (error) {\n        this._setConnectionState('disconnected');\n        const errorMessage = error.message;\n        // Provide helpful error message based on environment\n        if (errorMessage.includes('Node.js')) {\n          throw new Error(`${errorMessage}\\n\\n` + 'To use Realtime in Node.js, you need to provide a WebSocket implementation:\\n\\n' + 'Option 1: Use Node.js 22+ which has native WebSocket support\\n' + 'Option 2: Install and provide the \"ws\" package:\\n\\n' + '  npm install ws\\n\\n' + '  import ws from \"ws\"\\n' + '  const client = new RealtimeClient(url, {\\n' + '    ...options,\\n' + '    transport: ws\\n' + '  })');\n        }\n        throw new Error(`WebSocket not available: ${errorMessage}`);\n      }\n    }\n    this._setupConnectionHandlers();\n  }\n  /**\r\n   * Returns the URL of the websocket.\r\n   * @returns string The URL of the websocket.\r\n   */\n  endpointURL() {\n    return this._appendParams(this.endPoint, Object.assign({}, this.params, {\n      vsn: VSN\n    }));\n  }\n  /**\r\n   * Disconnects the socket.\r\n   *\r\n   * @param code A numeric status code to send on disconnect.\r\n   * @param reason A custom reason for the disconnect.\r\n   */\n  disconnect(code, reason) {\n    if (this.isDisconnecting()) {\n      return;\n    }\n    this._setConnectionState('disconnecting', true);\n    if (this.conn) {\n      // Setup fallback timer to prevent hanging in disconnecting state\n      const fallbackTimer = setTimeout(() => {\n        this._setConnectionState('disconnected');\n      }, 100);\n      this.conn.onclose = () => {\n        clearTimeout(fallbackTimer);\n        this._setConnectionState('disconnected');\n      };\n      // Close the WebSocket connection\n      if (code) {\n        this.conn.close(code, reason !== null && reason !== void 0 ? reason : '');\n      } else {\n        this.conn.close();\n      }\n      this._teardownConnection();\n    } else {\n      this._setConnectionState('disconnected');\n    }\n  }\n  /**\r\n   * Returns all created channels\r\n   */\n  getChannels() {\n    return this.channels;\n  }\n  /**\r\n   * Unsubscribes and removes a single channel\r\n   * @param channel A RealtimeChannel instance\r\n   */\n  async removeChannel(channel) {\n    const status = await channel.unsubscribe();\n    if (this.channels.length === 0) {\n      this.disconnect();\n    }\n    return status;\n  }\n  /**\r\n   * Unsubscribes and removes all channels\r\n   */\n  async removeAllChannels() {\n    const values_1 = await Promise.all(this.channels.map(channel => channel.unsubscribe()));\n    this.channels = [];\n    this.disconnect();\n    return values_1;\n  }\n  /**\r\n   * Logs the message.\r\n   *\r\n   * For customized logging, `this.logger` can be overridden.\r\n   */\n  log(kind, msg, data) {\n    this.logger(kind, msg, data);\n  }\n  /**\r\n   * Returns the current state of the socket.\r\n   */\n  connectionState() {\n    switch (this.conn && this.conn.readyState) {\n      case SOCKET_STATES.connecting:\n        return CONNECTION_STATE.Connecting;\n      case SOCKET_STATES.open:\n        return CONNECTION_STATE.Open;\n      case SOCKET_STATES.closing:\n        return CONNECTION_STATE.Closing;\n      default:\n        return CONNECTION_STATE.Closed;\n    }\n  }\n  /**\r\n   * Returns `true` is the connection is open.\r\n   */\n  isConnected() {\n    return this.connectionState() === CONNECTION_STATE.Open;\n  }\n  /**\r\n   * Returns `true` if the connection is currently connecting.\r\n   */\n  isConnecting() {\n    return this._connectionState === 'connecting';\n  }\n  /**\r\n   * Returns `true` if the connection is currently disconnecting.\r\n   */\n  isDisconnecting() {\n    return this._connectionState === 'disconnecting';\n  }\n  channel(topic, params = {\n    config: {}\n  }) {\n    const realtimeTopic = `realtime:${topic}`;\n    const exists = this.getChannels().find(c => c.topic === realtimeTopic);\n    if (!exists) {\n      const chan = new RealtimeChannel(`realtime:${topic}`, params, this);\n      this.channels.push(chan);\n      return chan;\n    } else {\n      return exists;\n    }\n  }\n  /**\r\n   * Push out a message if the socket is connected.\r\n   *\r\n   * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.\r\n   */\n  push(data) {\n    const {\n      topic,\n      event,\n      payload,\n      ref\n    } = data;\n    const callback = () => {\n      this.encode(data, result => {\n        var _a;\n        (_a = this.conn) === null || _a === void 0 ? void 0 : _a.send(result);\n      });\n    };\n    this.log('push', `${topic} ${event} (${ref})`, payload);\n    if (this.isConnected()) {\n      callback();\n    } else {\n      this.sendBuffer.push(callback);\n    }\n  }\n  /**\r\n   * Sets the JWT access token used for channel subscription authorization and Realtime RLS.\r\n   *\r\n   * If param is null it will use the `accessToken` callback function or the token set on the client.\r\n   *\r\n   * On callback used, it will set the value of the token internal to the client.\r\n   *\r\n   * @param token A JWT string to override the token set on the client.\r\n   */\n  async setAuth(token = null) {\n    this._authPromise = this._performAuth(token);\n    try {\n      await this._authPromise;\n    } finally {\n      this._authPromise = null;\n    }\n  }\n  /**\r\n   * Sends a heartbeat message if the socket is connected.\r\n   */\n  async sendHeartbeat() {\n    var _a;\n    if (!this.isConnected()) {\n      try {\n        this.heartbeatCallback('disconnected');\n      } catch (e) {\n        this.log('error', 'error in heartbeat callback', e);\n      }\n      return;\n    }\n    // Handle heartbeat timeout and force reconnection if needed\n    if (this.pendingHeartbeatRef) {\n      this.pendingHeartbeatRef = null;\n      this.log('transport', 'heartbeat timeout. Attempting to re-establish connection');\n      try {\n        this.heartbeatCallback('timeout');\n      } catch (e) {\n        this.log('error', 'error in heartbeat callback', e);\n      }\n      // Force reconnection after heartbeat timeout\n      this._wasManualDisconnect = false;\n      (_a = this.conn) === null || _a === void 0 ? void 0 : _a.close(WS_CLOSE_NORMAL, 'heartbeat timeout');\n      setTimeout(() => {\n        var _a;\n        if (!this.isConnected()) {\n          (_a = this.reconnectTimer) === null || _a === void 0 ? void 0 : _a.scheduleTimeout();\n        }\n      }, CONNECTION_TIMEOUTS.HEARTBEAT_TIMEOUT_FALLBACK);\n      return;\n    }\n    // Send heartbeat message to server\n    this.pendingHeartbeatRef = this._makeRef();\n    this.push({\n      topic: 'phoenix',\n      event: 'heartbeat',\n      payload: {},\n      ref: this.pendingHeartbeatRef\n    });\n    try {\n      this.heartbeatCallback('sent');\n    } catch (e) {\n      this.log('error', 'error in heartbeat callback', e);\n    }\n    this._setAuthSafely('heartbeat');\n  }\n  onHeartbeat(callback) {\n    this.heartbeatCallback = callback;\n  }\n  /**\r\n   * Flushes send buffer\r\n   */\n  flushSendBuffer() {\n    if (this.isConnected() && this.sendBuffer.length > 0) {\n      this.sendBuffer.forEach(callback => callback());\n      this.sendBuffer = [];\n    }\n  }\n  /**\r\n   * Return the next message ref, accounting for overflows\r\n   *\r\n   * @internal\r\n   */\n  _makeRef() {\n    let newRef = this.ref + 1;\n    if (newRef === this.ref) {\n      this.ref = 0;\n    } else {\n      this.ref = newRef;\n    }\n    return this.ref.toString();\n  }\n  /**\r\n   * Unsubscribe from channels with the specified topic.\r\n   *\r\n   * @internal\r\n   */\n  _leaveOpenTopic(topic) {\n    let dupChannel = this.channels.find(c => c.topic === topic && (c._isJoined() || c._isJoining()));\n    if (dupChannel) {\n      this.log('transport', `leaving duplicate topic \"${topic}\"`);\n      dupChannel.unsubscribe();\n    }\n  }\n  /**\r\n   * Removes a subscription from the socket.\r\n   *\r\n   * @param channel An open subscription.\r\n   *\r\n   * @internal\r\n   */\n  _remove(channel) {\n    this.channels = this.channels.filter(c => c.topic !== channel.topic);\n  }\n  /** @internal */\n  _onConnMessage(rawMessage) {\n    this.decode(rawMessage.data, msg => {\n      // Handle heartbeat responses\n      if (msg.topic === 'phoenix' && msg.event === 'phx_reply') {\n        try {\n          this.heartbeatCallback(msg.payload.status === 'ok' ? 'ok' : 'error');\n        } catch (e) {\n          this.log('error', 'error in heartbeat callback', e);\n        }\n      }\n      // Handle pending heartbeat reference cleanup\n      if (msg.ref && msg.ref === this.pendingHeartbeatRef) {\n        this.pendingHeartbeatRef = null;\n      }\n      // Log incoming message\n      const {\n        topic,\n        event,\n        payload,\n        ref\n      } = msg;\n      const refString = ref ? `(${ref})` : '';\n      const status = payload.status || '';\n      this.log('receive', `${status} ${topic} ${event} ${refString}`.trim(), payload);\n      // Route message to appropriate channels\n      this.channels.filter(channel => channel._isMember(topic)).forEach(channel => channel._trigger(event, payload, ref));\n      this._triggerStateCallbacks('message', msg);\n    });\n  }\n  /**\r\n   * Clear specific timer\r\n   * @internal\r\n   */\n  _clearTimer(timer) {\n    var _a;\n    if (timer === 'heartbeat' && this.heartbeatTimer) {\n      clearInterval(this.heartbeatTimer);\n      this.heartbeatTimer = undefined;\n    } else if (timer === 'reconnect') {\n      (_a = this.reconnectTimer) === null || _a === void 0 ? void 0 : _a.reset();\n    }\n  }\n  /**\r\n   * Clear all timers\r\n   * @internal\r\n   */\n  _clearAllTimers() {\n    this._clearTimer('heartbeat');\n    this._clearTimer('reconnect');\n  }\n  /**\r\n   * Setup connection handlers for WebSocket events\r\n   * @internal\r\n   */\n  _setupConnectionHandlers() {\n    if (!this.conn) return;\n    // Set binary type if supported (browsers and most WebSocket implementations)\n    if ('binaryType' in this.conn) {\n      ;\n      this.conn.binaryType = 'arraybuffer';\n    }\n    this.conn.onopen = () => this._onConnOpen();\n    this.conn.onerror = error => this._onConnError(error);\n    this.conn.onmessage = event => this._onConnMessage(event);\n    this.conn.onclose = event => this._onConnClose(event);\n  }\n  /**\r\n   * Teardown connection and cleanup resources\r\n   * @internal\r\n   */\n  _teardownConnection() {\n    if (this.conn) {\n      this.conn.onopen = null;\n      this.conn.onerror = null;\n      this.conn.onmessage = null;\n      this.conn.onclose = null;\n      this.conn = null;\n    }\n    this._clearAllTimers();\n    this.channels.forEach(channel => channel.teardown());\n  }\n  /** @internal */\n  _onConnOpen() {\n    this._setConnectionState('connected');\n    this.log('transport', `connected to ${this.endpointURL()}`);\n    this.flushSendBuffer();\n    this._clearTimer('reconnect');\n    if (!this.worker) {\n      this._startHeartbeat();\n    } else {\n      if (!this.workerRef) {\n        this._startWorkerHeartbeat();\n      }\n    }\n    this._triggerStateCallbacks('open');\n  }\n  /** @internal */\n  _startHeartbeat() {\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n    this.heartbeatTimer = setInterval(() => this.sendHeartbeat(), this.heartbeatIntervalMs);\n  }\n  /** @internal */\n  _startWorkerHeartbeat() {\n    if (this.workerUrl) {\n      this.log('worker', `starting worker for from ${this.workerUrl}`);\n    } else {\n      this.log('worker', `starting default worker`);\n    }\n    const objectUrl = this._workerObjectUrl(this.workerUrl);\n    this.workerRef = new Worker(objectUrl);\n    this.workerRef.onerror = error => {\n      this.log('worker', 'worker error', error.message);\n      this.workerRef.terminate();\n    };\n    this.workerRef.onmessage = event => {\n      if (event.data.event === 'keepAlive') {\n        this.sendHeartbeat();\n      }\n    };\n    this.workerRef.postMessage({\n      event: 'start',\n      interval: this.heartbeatIntervalMs\n    });\n  }\n  /** @internal */\n  _onConnClose(event) {\n    var _a;\n    this._setConnectionState('disconnected');\n    this.log('transport', 'close', event);\n    this._triggerChanError();\n    this._clearTimer('heartbeat');\n    // Only schedule reconnection if it wasn't a manual disconnect\n    if (!this._wasManualDisconnect) {\n      (_a = this.reconnectTimer) === null || _a === void 0 ? void 0 : _a.scheduleTimeout();\n    }\n    this._triggerStateCallbacks('close', event);\n  }\n  /** @internal */\n  _onConnError(error) {\n    this._setConnectionState('disconnected');\n    this.log('transport', `${error}`);\n    this._triggerChanError();\n    this._triggerStateCallbacks('error', error);\n  }\n  /** @internal */\n  _triggerChanError() {\n    this.channels.forEach(channel => channel._trigger(CHANNEL_EVENTS.error));\n  }\n  /** @internal */\n  _appendParams(url, params) {\n    if (Object.keys(params).length === 0) {\n      return url;\n    }\n    const prefix = url.match(/\\?/) ? '&' : '?';\n    const query = new URLSearchParams(params);\n    return `${url}${prefix}${query}`;\n  }\n  _workerObjectUrl(url) {\n    let result_url;\n    if (url) {\n      result_url = url;\n    } else {\n      const blob = new Blob([WORKER_SCRIPT], {\n        type: 'application/javascript'\n      });\n      result_url = URL.createObjectURL(blob);\n    }\n    return result_url;\n  }\n  /**\r\n   * Set connection state with proper state management\r\n   * @internal\r\n   */\n  _setConnectionState(state, manual = false) {\n    this._connectionState = state;\n    if (state === 'connecting') {\n      this._wasManualDisconnect = false;\n    } else if (state === 'disconnecting') {\n      this._wasManualDisconnect = manual;\n    }\n  }\n  /**\r\n   * Perform the actual auth operation\r\n   * @internal\r\n   */\n  async _performAuth(token = null) {\n    let tokenToSend;\n    if (token) {\n      tokenToSend = token;\n    } else if (this.accessToken) {\n      // Always call the accessToken callback to get fresh token\n      tokenToSend = await this.accessToken();\n    } else {\n      tokenToSend = this.accessTokenValue;\n    }\n    if (this.accessTokenValue != tokenToSend) {\n      this.accessTokenValue = tokenToSend;\n      this.channels.forEach(channel => {\n        const payload = {\n          access_token: tokenToSend,\n          version: DEFAULT_VERSION\n        };\n        tokenToSend && channel.updateJoinPayload(payload);\n        if (channel.joinedOnce && channel._isJoined()) {\n          channel._push(CHANNEL_EVENTS.access_token, {\n            access_token: tokenToSend\n          });\n        }\n      });\n    }\n  }\n  /**\r\n   * Wait for any in-flight auth operations to complete\r\n   * @internal\r\n   */\n  async _waitForAuthIfNeeded() {\n    if (this._authPromise) {\n      await this._authPromise;\n    }\n  }\n  /**\r\n   * Safely call setAuth with standardized error handling\r\n   * @internal\r\n   */\n  _setAuthSafely(context = 'general') {\n    this.setAuth().catch(e => {\n      this.log('error', `error setting auth in ${context}`, e);\n    });\n  }\n  /**\r\n   * Trigger state change callbacks with proper error handling\r\n   * @internal\r\n   */\n  _triggerStateCallbacks(event, data) {\n    try {\n      this.stateChangeCallbacks[event].forEach(callback => {\n        try {\n          callback(data);\n        } catch (e) {\n          this.log('error', `error in ${event} callback`, e);\n        }\n      });\n    } catch (e) {\n      this.log('error', `error triggering ${event} callbacks`, e);\n    }\n  }\n  /**\r\n   * Setup reconnection timer with proper configuration\r\n   * @internal\r\n   */\n  _setupReconnectionTimer() {\n    this.reconnectTimer = new Timer(async () => {\n      setTimeout(async () => {\n        await this._waitForAuthIfNeeded();\n        if (!this.isConnected()) {\n          this.connect();\n        }\n      }, CONNECTION_TIMEOUTS.RECONNECT_DELAY);\n    }, this.reconnectAfterMs);\n  }\n  /**\r\n   * Initialize client options with defaults\r\n   * @internal\r\n   */\n  _initializeOptions(options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n    // Set defaults\n    this.transport = (_a = options === null || options === void 0 ? void 0 : options.transport) !== null && _a !== void 0 ? _a : null;\n    this.timeout = (_b = options === null || options === void 0 ? void 0 : options.timeout) !== null && _b !== void 0 ? _b : DEFAULT_TIMEOUT;\n    this.heartbeatIntervalMs = (_c = options === null || options === void 0 ? void 0 : options.heartbeatIntervalMs) !== null && _c !== void 0 ? _c : CONNECTION_TIMEOUTS.HEARTBEAT_INTERVAL;\n    this.worker = (_d = options === null || options === void 0 ? void 0 : options.worker) !== null && _d !== void 0 ? _d : false;\n    this.accessToken = (_e = options === null || options === void 0 ? void 0 : options.accessToken) !== null && _e !== void 0 ? _e : null;\n    this.heartbeatCallback = (_f = options === null || options === void 0 ? void 0 : options.heartbeatCallback) !== null && _f !== void 0 ? _f : noop;\n    // Handle special cases\n    if (options === null || options === void 0 ? void 0 : options.params) this.params = options.params;\n    if (options === null || options === void 0 ? void 0 : options.logger) this.logger = options.logger;\n    if ((options === null || options === void 0 ? void 0 : options.logLevel) || (options === null || options === void 0 ? void 0 : options.log_level)) {\n      this.logLevel = options.logLevel || options.log_level;\n      this.params = Object.assign(Object.assign({}, this.params), {\n        log_level: this.logLevel\n      });\n    }\n    // Set up functions with defaults\n    this.reconnectAfterMs = (_g = options === null || options === void 0 ? void 0 : options.reconnectAfterMs) !== null && _g !== void 0 ? _g : tries => {\n      return RECONNECT_INTERVALS[tries - 1] || DEFAULT_RECONNECT_FALLBACK;\n    };\n    this.encode = (_h = options === null || options === void 0 ? void 0 : options.encode) !== null && _h !== void 0 ? _h : (payload, callback) => {\n      return callback(JSON.stringify(payload));\n    };\n    this.decode = (_j = options === null || options === void 0 ? void 0 : options.decode) !== null && _j !== void 0 ? _j : this.serializer.decode.bind(this.serializer);\n    // Handle worker setup\n    if (this.worker) {\n      if (typeof window !== 'undefined' && !window.Worker) {\n        throw new Error('Web Worker is not supported');\n      }\n      this.workerUrl = options === null || options === void 0 ? void 0 : options.workerUrl;\n    }\n  }\n}","map":{"version":3,"names":["WebSocketFactory","CHANNEL_EVENTS","CONNECTION_STATE","DEFAULT_VERSION","DEFAULT_TIMEOUT","SOCKET_STATES","TRANSPORTS","VSN","WS_CLOSE_NORMAL","Serializer","Timer","httpEndpointURL","RealtimeChannel","noop","CONNECTION_TIMEOUTS","HEARTBEAT_INTERVAL","RECONNECT_DELAY","HEARTBEAT_TIMEOUT_FALLBACK","RECONNECT_INTERVALS","DEFAULT_RECONNECT_FALLBACK","WORKER_SCRIPT","RealtimeClient","constructor","endPoint","options","accessTokenValue","apiKey","channels","Array","httpEndpoint","headers","params","timeout","transport","heartbeatIntervalMs","heartbeatTimer","undefined","pendingHeartbeatRef","heartbeatCallback","ref","reconnectTimer","logger","conn","sendBuffer","serializer","stateChangeCallbacks","open","close","error","message","accessToken","_connectionState","_wasManualDisconnect","_authPromise","_resolveFetch","customFetch","_fetch","fetch","args","then","default","catch","Error","_a","apikey","websocket","_initializeOptions","_setupReconnectionTimer","connect","isConnecting","isDisconnecting","isConnected","_setConnectionState","_setAuthSafely","endpointURL","createWebSocket","errorMessage","includes","_setupConnectionHandlers","_appendParams","Object","assign","vsn","disconnect","code","reason","fallbackTimer","setTimeout","onclose","clearTimeout","_teardownConnection","getChannels","removeChannel","channel","status","unsubscribe","length","removeAllChannels","values_1","Promise","all","map","log","kind","msg","data","connectionState","readyState","connecting","Connecting","Open","closing","Closing","Closed","topic","config","realtimeTopic","exists","find","c","chan","push","event","payload","callback","encode","result","send","setAuth","token","_performAuth","sendHeartbeat","e","scheduleTimeout","_makeRef","onHeartbeat","flushSendBuffer","forEach","newRef","toString","_leaveOpenTopic","dupChannel","_isJoined","_isJoining","_remove","filter","_onConnMessage","rawMessage","decode","refString","trim","_isMember","_trigger","_triggerStateCallbacks","_clearTimer","timer","clearInterval","reset","_clearAllTimers","binaryType","onopen","_onConnOpen","onerror","_onConnError","onmessage","_onConnClose","teardown","worker","_startHeartbeat","workerRef","_startWorkerHeartbeat","setInterval","workerUrl","objectUrl","_workerObjectUrl","Worker","terminate","postMessage","interval","_triggerChanError","url","keys","prefix","match","query","URLSearchParams","result_url","blob","Blob","type","URL","createObjectURL","state","manual","tokenToSend","access_token","version","updateJoinPayload","joinedOnce","_push","_waitForAuthIfNeeded","context","reconnectAfterMs","_b","_c","_d","_e","_f","logLevel","log_level","_g","tries","_h","JSON","stringify","_j","bind","window"],"sources":["C:\\projects\\cidika-travel\\node_modules\\@supabase\\realtime-js\\src\\RealtimeClient.ts"],"sourcesContent":["import WebSocketFactory, { WebSocketLike } from './lib/websocket-factory'\r\n\r\nimport {\r\n  CHANNEL_EVENTS,\r\n  CONNECTION_STATE,\r\n  DEFAULT_VERSION,\r\n  DEFAULT_TIMEOUT,\r\n  SOCKET_STATES,\r\n  TRANSPORTS,\r\n  VSN,\r\n  WS_CLOSE_NORMAL,\r\n} from './lib/constants'\r\n\r\nimport Serializer from './lib/serializer'\r\nimport Timer from './lib/timer'\r\n\r\nimport { httpEndpointURL } from './lib/transformers'\r\nimport RealtimeChannel from './RealtimeChannel'\r\nimport type { RealtimeChannelOptions } from './RealtimeChannel'\r\n\r\ntype Fetch = typeof fetch\r\n\r\nexport type Channel = {\r\n  name: string\r\n  inserted_at: string\r\n  updated_at: string\r\n  id: number\r\n}\r\nexport type LogLevel = 'info' | 'warn' | 'error'\r\n\r\nexport type RealtimeMessage = {\r\n  topic: string\r\n  event: string\r\n  payload: any\r\n  ref: string\r\n  join_ref?: string\r\n}\r\n\r\nexport type RealtimeRemoveChannelResponse = 'ok' | 'timed out' | 'error'\r\nexport type HeartbeatStatus =\r\n  | 'sent'\r\n  | 'ok'\r\n  | 'error'\r\n  | 'timeout'\r\n  | 'disconnected'\r\n\r\nconst noop = () => {}\r\n\r\ntype RealtimeClientState =\r\n  | 'connecting'\r\n  | 'connected'\r\n  | 'disconnecting'\r\n  | 'disconnected'\r\n\r\n// Connection-related constants\r\nconst CONNECTION_TIMEOUTS = {\r\n  HEARTBEAT_INTERVAL: 25000,\r\n  RECONNECT_DELAY: 10,\r\n  HEARTBEAT_TIMEOUT_FALLBACK: 100,\r\n} as const\r\n\r\nconst RECONNECT_INTERVALS = [1000, 2000, 5000, 10000] as const\r\nconst DEFAULT_RECONNECT_FALLBACK = 10000\r\n\r\nexport interface WebSocketLikeConstructor {\r\n  new (\r\n    address: string | URL,\r\n    subprotocols?: string | string[] | undefined\r\n  ): WebSocketLike\r\n  // Allow additional properties that may exist on WebSocket constructors\r\n  [key: string]: any\r\n}\r\n\r\nexport interface WebSocketLikeError {\r\n  error: any\r\n  message: string\r\n  type: string\r\n}\r\n\r\nexport type RealtimeClientOptions = {\r\n  transport?: WebSocketLikeConstructor\r\n  timeout?: number\r\n  heartbeatIntervalMs?: number\r\n  heartbeatCallback?: (status: HeartbeatStatus) => void\r\n  logger?: Function\r\n  encode?: Function\r\n  decode?: Function\r\n  reconnectAfterMs?: Function\r\n  headers?: { [key: string]: string }\r\n  params?: { [key: string]: any }\r\n  //Deprecated: Use it in favour of correct casing `logLevel`\r\n  log_level?: LogLevel\r\n  logLevel?: LogLevel\r\n  fetch?: Fetch\r\n  worker?: boolean\r\n  workerUrl?: string\r\n  accessToken?: () => Promise<string | null>\r\n}\r\n\r\nconst WORKER_SCRIPT = `\r\n  addEventListener(\"message\", (e) => {\r\n    if (e.data.event === \"start\") {\r\n      setInterval(() => postMessage({ event: \"keepAlive\" }), e.data.interval);\r\n    }\r\n  });`\r\n\r\nexport default class RealtimeClient {\r\n  accessTokenValue: string | null = null\r\n  apiKey: string | null = null\r\n  channels: RealtimeChannel[] = new Array()\r\n  endPoint: string = ''\r\n  httpEndpoint: string = ''\r\n  /** @deprecated headers cannot be set on websocket connections */\r\n  headers?: { [key: string]: string } = {}\r\n  params?: { [key: string]: string } = {}\r\n  timeout: number = DEFAULT_TIMEOUT\r\n  transport: WebSocketLikeConstructor | null = null\r\n  heartbeatIntervalMs: number = CONNECTION_TIMEOUTS.HEARTBEAT_INTERVAL\r\n  heartbeatTimer: ReturnType<typeof setInterval> | undefined = undefined\r\n  pendingHeartbeatRef: string | null = null\r\n  heartbeatCallback: (status: HeartbeatStatus) => void = noop\r\n  ref: number = 0\r\n  reconnectTimer: Timer | null = null\r\n  logger: Function = noop\r\n  logLevel?: LogLevel\r\n  encode!: Function\r\n  decode!: Function\r\n  reconnectAfterMs!: Function\r\n  conn: WebSocketLike | null = null\r\n  sendBuffer: Function[] = []\r\n  serializer: Serializer = new Serializer()\r\n  stateChangeCallbacks: {\r\n    open: Function[]\r\n    close: Function[]\r\n    error: Function[]\r\n    message: Function[]\r\n  } = {\r\n    open: [],\r\n    close: [],\r\n    error: [],\r\n    message: [],\r\n  }\r\n  fetch: Fetch\r\n  accessToken: (() => Promise<string | null>) | null = null\r\n  worker?: boolean\r\n  workerUrl?: string\r\n  workerRef?: Worker\r\n  private _connectionState: RealtimeClientState = 'disconnected'\r\n  private _wasManualDisconnect: boolean = false\r\n  private _authPromise: Promise<void> | null = null\r\n\r\n  /**\r\n   * Initializes the Socket.\r\n   *\r\n   * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\r\n   * @param httpEndpoint The string HTTP endpoint, ie, \"https://example.com\", \"/\" (inherited host & protocol)\r\n   * @param options.transport The Websocket Transport, for example WebSocket. This can be a custom implementation\r\n   * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\r\n   * @param options.params The optional params to pass when connecting.\r\n   * @param options.headers Deprecated: headers cannot be set on websocket connections and this option will be removed in the future.\r\n   * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\r\n   * @param options.heartbeatCallback The optional function to handle heartbeat status.\r\n   * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\r\n   * @param options.logLevel Sets the log level for Realtime\r\n   * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\r\n   * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\r\n   * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\r\n   * @param options.worker Use Web Worker to set a side flow. Defaults to false.\r\n   * @param options.workerUrl The URL of the worker script. Defaults to https://realtime.supabase.com/worker.js that includes a heartbeat event call to keep the connection alive.\r\n   */\r\n  constructor(endPoint: string, options?: RealtimeClientOptions) {\r\n    // Validate required parameters\r\n    if (!options?.params?.apikey) {\r\n      throw new Error('API key is required to connect to Realtime')\r\n    }\r\n    this.apiKey = options.params.apikey\r\n\r\n    // Initialize endpoint URLs\r\n    this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`\r\n    this.httpEndpoint = httpEndpointURL(endPoint)\r\n\r\n    this._initializeOptions(options)\r\n    this._setupReconnectionTimer()\r\n    this.fetch = this._resolveFetch(options?.fetch)\r\n  }\r\n\r\n  /**\r\n   * Connects the socket, unless already connected.\r\n   */\r\n  connect(): void {\r\n    // Skip if already connecting, disconnecting, or connected\r\n    if (\r\n      this.isConnecting() ||\r\n      this.isDisconnecting() ||\r\n      (this.conn !== null && this.isConnected())\r\n    ) {\r\n      return\r\n    }\r\n\r\n    this._setConnectionState('connecting')\r\n    this._setAuthSafely('connect')\r\n\r\n    // Establish WebSocket connection\r\n    if (this.transport) {\r\n      // Use custom transport if provided\r\n      this.conn = new this.transport(this.endpointURL()) as WebSocketLike\r\n    } else {\r\n      // Try to use native WebSocket\r\n      try {\r\n        this.conn = WebSocketFactory.createWebSocket(this.endpointURL())\r\n      } catch (error) {\r\n        this._setConnectionState('disconnected')\r\n        const errorMessage = (error as Error).message\r\n\r\n        // Provide helpful error message based on environment\r\n        if (errorMessage.includes('Node.js')) {\r\n          throw new Error(\r\n            `${errorMessage}\\n\\n` +\r\n              'To use Realtime in Node.js, you need to provide a WebSocket implementation:\\n\\n' +\r\n              'Option 1: Use Node.js 22+ which has native WebSocket support\\n' +\r\n              'Option 2: Install and provide the \"ws\" package:\\n\\n' +\r\n              '  npm install ws\\n\\n' +\r\n              '  import ws from \"ws\"\\n' +\r\n              '  const client = new RealtimeClient(url, {\\n' +\r\n              '    ...options,\\n' +\r\n              '    transport: ws\\n' +\r\n              '  })'\r\n          )\r\n        }\r\n        throw new Error(`WebSocket not available: ${errorMessage}`)\r\n      }\r\n    }\r\n    this._setupConnectionHandlers()\r\n  }\r\n\r\n  /**\r\n   * Returns the URL of the websocket.\r\n   * @returns string The URL of the websocket.\r\n   */\r\n  endpointURL(): string {\r\n    return this._appendParams(\r\n      this.endPoint,\r\n      Object.assign({}, this.params, { vsn: VSN })\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Disconnects the socket.\r\n   *\r\n   * @param code A numeric status code to send on disconnect.\r\n   * @param reason A custom reason for the disconnect.\r\n   */\r\n  disconnect(code?: number, reason?: string): void {\r\n    if (this.isDisconnecting()) {\r\n      return\r\n    }\r\n\r\n    this._setConnectionState('disconnecting', true)\r\n\r\n    if (this.conn) {\r\n      // Setup fallback timer to prevent hanging in disconnecting state\r\n      const fallbackTimer = setTimeout(() => {\r\n        this._setConnectionState('disconnected')\r\n      }, 100)\r\n\r\n      this.conn.onclose = () => {\r\n        clearTimeout(fallbackTimer)\r\n        this._setConnectionState('disconnected')\r\n      }\r\n\r\n      // Close the WebSocket connection\r\n      if (code) {\r\n        this.conn.close(code, reason ?? '')\r\n      } else {\r\n        this.conn.close()\r\n      }\r\n\r\n      this._teardownConnection()\r\n    } else {\r\n      this._setConnectionState('disconnected')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns all created channels\r\n   */\r\n  getChannels(): RealtimeChannel[] {\r\n    return this.channels\r\n  }\r\n\r\n  /**\r\n   * Unsubscribes and removes a single channel\r\n   * @param channel A RealtimeChannel instance\r\n   */\r\n  async removeChannel(\r\n    channel: RealtimeChannel\r\n  ): Promise<RealtimeRemoveChannelResponse> {\r\n    const status = await channel.unsubscribe()\r\n\r\n    if (this.channels.length === 0) {\r\n      this.disconnect()\r\n    }\r\n\r\n    return status\r\n  }\r\n\r\n  /**\r\n   * Unsubscribes and removes all channels\r\n   */\r\n  async removeAllChannels(): Promise<RealtimeRemoveChannelResponse[]> {\r\n    const values_1 = await Promise.all(\r\n      this.channels.map((channel) => channel.unsubscribe())\r\n    )\r\n    this.channels = []\r\n    this.disconnect()\r\n    return values_1\r\n  }\r\n\r\n  /**\r\n   * Logs the message.\r\n   *\r\n   * For customized logging, `this.logger` can be overridden.\r\n   */\r\n  log(kind: string, msg: string, data?: any) {\r\n    this.logger(kind, msg, data)\r\n  }\r\n\r\n  /**\r\n   * Returns the current state of the socket.\r\n   */\r\n  connectionState(): CONNECTION_STATE {\r\n    switch (this.conn && this.conn.readyState) {\r\n      case SOCKET_STATES.connecting:\r\n        return CONNECTION_STATE.Connecting\r\n      case SOCKET_STATES.open:\r\n        return CONNECTION_STATE.Open\r\n      case SOCKET_STATES.closing:\r\n        return CONNECTION_STATE.Closing\r\n      default:\r\n        return CONNECTION_STATE.Closed\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns `true` is the connection is open.\r\n   */\r\n  isConnected(): boolean {\r\n    return this.connectionState() === CONNECTION_STATE.Open\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if the connection is currently connecting.\r\n   */\r\n  isConnecting(): boolean {\r\n    return this._connectionState === 'connecting'\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if the connection is currently disconnecting.\r\n   */\r\n  isDisconnecting(): boolean {\r\n    return this._connectionState === 'disconnecting'\r\n  }\r\n\r\n  channel(\r\n    topic: string,\r\n    params: RealtimeChannelOptions = { config: {} }\r\n  ): RealtimeChannel {\r\n    const realtimeTopic = `realtime:${topic}`\r\n    const exists = this.getChannels().find(\r\n      (c: RealtimeChannel) => c.topic === realtimeTopic\r\n    )\r\n\r\n    if (!exists) {\r\n      const chan = new RealtimeChannel(`realtime:${topic}`, params, this)\r\n      this.channels.push(chan)\r\n\r\n      return chan\r\n    } else {\r\n      return exists\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Push out a message if the socket is connected.\r\n   *\r\n   * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.\r\n   */\r\n  push(data: RealtimeMessage): void {\r\n    const { topic, event, payload, ref } = data\r\n    const callback = () => {\r\n      this.encode(data, (result: any) => {\r\n        this.conn?.send(result)\r\n      })\r\n    }\r\n    this.log('push', `${topic} ${event} (${ref})`, payload)\r\n    if (this.isConnected()) {\r\n      callback()\r\n    } else {\r\n      this.sendBuffer.push(callback)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the JWT access token used for channel subscription authorization and Realtime RLS.\r\n   *\r\n   * If param is null it will use the `accessToken` callback function or the token set on the client.\r\n   *\r\n   * On callback used, it will set the value of the token internal to the client.\r\n   *\r\n   * @param token A JWT string to override the token set on the client.\r\n   */\r\n  async setAuth(token: string | null = null): Promise<void> {\r\n    this._authPromise = this._performAuth(token)\r\n    try {\r\n      await this._authPromise\r\n    } finally {\r\n      this._authPromise = null\r\n    }\r\n  }\r\n  /**\r\n   * Sends a heartbeat message if the socket is connected.\r\n   */\r\n  async sendHeartbeat() {\r\n    if (!this.isConnected()) {\r\n      try {\r\n        this.heartbeatCallback('disconnected')\r\n      } catch (e) {\r\n        this.log('error', 'error in heartbeat callback', e)\r\n      }\r\n      return\r\n    }\r\n\r\n    // Handle heartbeat timeout and force reconnection if needed\r\n    if (this.pendingHeartbeatRef) {\r\n      this.pendingHeartbeatRef = null\r\n      this.log(\r\n        'transport',\r\n        'heartbeat timeout. Attempting to re-establish connection'\r\n      )\r\n      try {\r\n        this.heartbeatCallback('timeout')\r\n      } catch (e) {\r\n        this.log('error', 'error in heartbeat callback', e)\r\n      }\r\n\r\n      // Force reconnection after heartbeat timeout\r\n      this._wasManualDisconnect = false\r\n      this.conn?.close(WS_CLOSE_NORMAL, 'heartbeat timeout')\r\n\r\n      setTimeout(() => {\r\n        if (!this.isConnected()) {\r\n          this.reconnectTimer?.scheduleTimeout()\r\n        }\r\n      }, CONNECTION_TIMEOUTS.HEARTBEAT_TIMEOUT_FALLBACK)\r\n      return\r\n    }\r\n\r\n    // Send heartbeat message to server\r\n    this.pendingHeartbeatRef = this._makeRef()\r\n    this.push({\r\n      topic: 'phoenix',\r\n      event: 'heartbeat',\r\n      payload: {},\r\n      ref: this.pendingHeartbeatRef,\r\n    })\r\n    try {\r\n      this.heartbeatCallback('sent')\r\n    } catch (e) {\r\n      this.log('error', 'error in heartbeat callback', e)\r\n    }\r\n\r\n    this._setAuthSafely('heartbeat')\r\n  }\r\n\r\n  onHeartbeat(callback: (status: HeartbeatStatus) => void): void {\r\n    this.heartbeatCallback = callback\r\n  }\r\n  /**\r\n   * Flushes send buffer\r\n   */\r\n  flushSendBuffer() {\r\n    if (this.isConnected() && this.sendBuffer.length > 0) {\r\n      this.sendBuffer.forEach((callback) => callback())\r\n      this.sendBuffer = []\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Use either custom fetch, if provided, or default fetch to make HTTP requests\r\n   *\r\n   * @internal\r\n   */\r\n  _resolveFetch = (customFetch?: Fetch): Fetch => {\r\n    let _fetch: Fetch\r\n    if (customFetch) {\r\n      _fetch = customFetch\r\n    } else if (typeof fetch === 'undefined') {\r\n      // Node.js environment without native fetch\r\n      _fetch = (...args) =>\r\n        import('@supabase/node-fetch' as any)\r\n          .then(({ default: fetch }) => fetch(...args))\r\n          .catch((error) => {\r\n            throw new Error(\r\n              `Failed to load @supabase/node-fetch: ${error.message}. ` +\r\n                `This is required for HTTP requests in Node.js environments without native fetch.`\r\n            )\r\n          })\r\n    } else {\r\n      _fetch = fetch\r\n    }\r\n    return (...args) => _fetch(...args)\r\n  }\r\n\r\n  /**\r\n   * Return the next message ref, accounting for overflows\r\n   *\r\n   * @internal\r\n   */\r\n  _makeRef(): string {\r\n    let newRef = this.ref + 1\r\n    if (newRef === this.ref) {\r\n      this.ref = 0\r\n    } else {\r\n      this.ref = newRef\r\n    }\r\n\r\n    return this.ref.toString()\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe from channels with the specified topic.\r\n   *\r\n   * @internal\r\n   */\r\n  _leaveOpenTopic(topic: string): void {\r\n    let dupChannel = this.channels.find(\r\n      (c) => c.topic === topic && (c._isJoined() || c._isJoining())\r\n    )\r\n    if (dupChannel) {\r\n      this.log('transport', `leaving duplicate topic \"${topic}\"`)\r\n      dupChannel.unsubscribe()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes a subscription from the socket.\r\n   *\r\n   * @param channel An open subscription.\r\n   *\r\n   * @internal\r\n   */\r\n  _remove(channel: RealtimeChannel) {\r\n    this.channels = this.channels.filter((c) => c.topic !== channel.topic)\r\n  }\r\n\r\n  /** @internal */\r\n  private _onConnMessage(rawMessage: { data: any }) {\r\n    this.decode(rawMessage.data, (msg: RealtimeMessage) => {\r\n      // Handle heartbeat responses\r\n      if (msg.topic === 'phoenix' && msg.event === 'phx_reply') {\r\n        try {\r\n          this.heartbeatCallback(msg.payload.status === 'ok' ? 'ok' : 'error')\r\n        } catch (e) {\r\n          this.log('error', 'error in heartbeat callback', e)\r\n        }\r\n      }\r\n\r\n      // Handle pending heartbeat reference cleanup\r\n      if (msg.ref && msg.ref === this.pendingHeartbeatRef) {\r\n        this.pendingHeartbeatRef = null\r\n      }\r\n\r\n      // Log incoming message\r\n      const { topic, event, payload, ref } = msg\r\n      const refString = ref ? `(${ref})` : ''\r\n      const status = payload.status || ''\r\n      this.log(\r\n        'receive',\r\n        `${status} ${topic} ${event} ${refString}`.trim(),\r\n        payload\r\n      )\r\n\r\n      // Route message to appropriate channels\r\n      this.channels\r\n        .filter((channel: RealtimeChannel) => channel._isMember(topic))\r\n        .forEach((channel: RealtimeChannel) =>\r\n          channel._trigger(event, payload, ref)\r\n        )\r\n\r\n      this._triggerStateCallbacks('message', msg)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Clear specific timer\r\n   * @internal\r\n   */\r\n  private _clearTimer(timer: 'heartbeat' | 'reconnect'): void {\r\n    if (timer === 'heartbeat' && this.heartbeatTimer) {\r\n      clearInterval(this.heartbeatTimer)\r\n      this.heartbeatTimer = undefined\r\n    } else if (timer === 'reconnect') {\r\n      this.reconnectTimer?.reset()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear all timers\r\n   * @internal\r\n   */\r\n  private _clearAllTimers(): void {\r\n    this._clearTimer('heartbeat')\r\n    this._clearTimer('reconnect')\r\n  }\r\n\r\n  /**\r\n   * Setup connection handlers for WebSocket events\r\n   * @internal\r\n   */\r\n  private _setupConnectionHandlers(): void {\r\n    if (!this.conn) return\r\n\r\n    // Set binary type if supported (browsers and most WebSocket implementations)\r\n    if ('binaryType' in this.conn) {\r\n      ;(this.conn as any).binaryType = 'arraybuffer'\r\n    }\r\n\r\n    this.conn.onopen = () => this._onConnOpen()\r\n    this.conn.onerror = (error: Event) => this._onConnError(error)\r\n    this.conn.onmessage = (event: any) => this._onConnMessage(event)\r\n    this.conn.onclose = (event: any) => this._onConnClose(event)\r\n  }\r\n\r\n  /**\r\n   * Teardown connection and cleanup resources\r\n   * @internal\r\n   */\r\n  private _teardownConnection(): void {\r\n    if (this.conn) {\r\n      this.conn.onopen = null\r\n      this.conn.onerror = null\r\n      this.conn.onmessage = null\r\n      this.conn.onclose = null\r\n      this.conn = null\r\n    }\r\n    this._clearAllTimers()\r\n    this.channels.forEach((channel) => channel.teardown())\r\n  }\r\n\r\n  /** @internal */\r\n  private _onConnOpen() {\r\n    this._setConnectionState('connected')\r\n    this.log('transport', `connected to ${this.endpointURL()}`)\r\n    this.flushSendBuffer()\r\n    this._clearTimer('reconnect')\r\n\r\n    if (!this.worker) {\r\n      this._startHeartbeat()\r\n    } else {\r\n      if (!this.workerRef) {\r\n        this._startWorkerHeartbeat()\r\n      }\r\n    }\r\n\r\n    this._triggerStateCallbacks('open')\r\n  }\r\n  /** @internal */\r\n  private _startHeartbeat() {\r\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer)\r\n    this.heartbeatTimer = setInterval(\r\n      () => this.sendHeartbeat(),\r\n      this.heartbeatIntervalMs\r\n    )\r\n  }\r\n\r\n  /** @internal */\r\n  private _startWorkerHeartbeat() {\r\n    if (this.workerUrl) {\r\n      this.log('worker', `starting worker for from ${this.workerUrl}`)\r\n    } else {\r\n      this.log('worker', `starting default worker`)\r\n    }\r\n    const objectUrl = this._workerObjectUrl(this.workerUrl!)\r\n    this.workerRef = new Worker(objectUrl)\r\n    this.workerRef.onerror = (error) => {\r\n      this.log('worker', 'worker error', (error as ErrorEvent).message)\r\n      this.workerRef!.terminate()\r\n    }\r\n    this.workerRef.onmessage = (event) => {\r\n      if (event.data.event === 'keepAlive') {\r\n        this.sendHeartbeat()\r\n      }\r\n    }\r\n    this.workerRef.postMessage({\r\n      event: 'start',\r\n      interval: this.heartbeatIntervalMs,\r\n    })\r\n  }\r\n  /** @internal */\r\n  private _onConnClose(event: any) {\r\n    this._setConnectionState('disconnected')\r\n    this.log('transport', 'close', event)\r\n    this._triggerChanError()\r\n    this._clearTimer('heartbeat')\r\n\r\n    // Only schedule reconnection if it wasn't a manual disconnect\r\n    if (!this._wasManualDisconnect) {\r\n      this.reconnectTimer?.scheduleTimeout()\r\n    }\r\n\r\n    this._triggerStateCallbacks('close', event)\r\n  }\r\n\r\n  /** @internal */\r\n  private _onConnError(error: Event) {\r\n    this._setConnectionState('disconnected')\r\n    this.log('transport', `${error}`)\r\n    this._triggerChanError()\r\n    this._triggerStateCallbacks('error', error)\r\n  }\r\n\r\n  /** @internal */\r\n  private _triggerChanError() {\r\n    this.channels.forEach((channel: RealtimeChannel) =>\r\n      channel._trigger(CHANNEL_EVENTS.error)\r\n    )\r\n  }\r\n\r\n  /** @internal */\r\n  private _appendParams(\r\n    url: string,\r\n    params: { [key: string]: string }\r\n  ): string {\r\n    if (Object.keys(params).length === 0) {\r\n      return url\r\n    }\r\n    const prefix = url.match(/\\?/) ? '&' : '?'\r\n    const query = new URLSearchParams(params)\r\n    return `${url}${prefix}${query}`\r\n  }\r\n\r\n  private _workerObjectUrl(url: string | undefined): string {\r\n    let result_url: string\r\n    if (url) {\r\n      result_url = url\r\n    } else {\r\n      const blob = new Blob([WORKER_SCRIPT], { type: 'application/javascript' })\r\n      result_url = URL.createObjectURL(blob)\r\n    }\r\n    return result_url\r\n  }\r\n\r\n  /**\r\n   * Set connection state with proper state management\r\n   * @internal\r\n   */\r\n  private _setConnectionState(\r\n    state: RealtimeClientState,\r\n    manual = false\r\n  ): void {\r\n    this._connectionState = state\r\n\r\n    if (state === 'connecting') {\r\n      this._wasManualDisconnect = false\r\n    } else if (state === 'disconnecting') {\r\n      this._wasManualDisconnect = manual\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform the actual auth operation\r\n   * @internal\r\n   */\r\n  private async _performAuth(token: string | null = null): Promise<void> {\r\n    let tokenToSend: string | null\r\n\r\n    if (token) {\r\n      tokenToSend = token\r\n    } else if (this.accessToken) {\r\n      // Always call the accessToken callback to get fresh token\r\n      tokenToSend = await this.accessToken()\r\n    } else {\r\n      tokenToSend = this.accessTokenValue\r\n    }\r\n\r\n    if (this.accessTokenValue != tokenToSend) {\r\n      this.accessTokenValue = tokenToSend\r\n      this.channels.forEach((channel) => {\r\n        const payload = {\r\n          access_token: tokenToSend,\r\n          version: DEFAULT_VERSION,\r\n        }\r\n\r\n        tokenToSend && channel.updateJoinPayload(payload)\r\n\r\n        if (channel.joinedOnce && channel._isJoined()) {\r\n          channel._push(CHANNEL_EVENTS.access_token, {\r\n            access_token: tokenToSend,\r\n          })\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Wait for any in-flight auth operations to complete\r\n   * @internal\r\n   */\r\n  private async _waitForAuthIfNeeded(): Promise<void> {\r\n    if (this._authPromise) {\r\n      await this._authPromise\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Safely call setAuth with standardized error handling\r\n   * @internal\r\n   */\r\n  private _setAuthSafely(context = 'general'): void {\r\n    this.setAuth().catch((e) => {\r\n      this.log('error', `error setting auth in ${context}`, e)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Trigger state change callbacks with proper error handling\r\n   * @internal\r\n   */\r\n  private _triggerStateCallbacks(\r\n    event: keyof typeof this.stateChangeCallbacks,\r\n    data?: any\r\n  ): void {\r\n    try {\r\n      this.stateChangeCallbacks[event].forEach((callback) => {\r\n        try {\r\n          callback(data)\r\n        } catch (e) {\r\n          this.log('error', `error in ${event} callback`, e)\r\n        }\r\n      })\r\n    } catch (e) {\r\n      this.log('error', `error triggering ${event} callbacks`, e)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setup reconnection timer with proper configuration\r\n   * @internal\r\n   */\r\n  private _setupReconnectionTimer(): void {\r\n    this.reconnectTimer = new Timer(async () => {\r\n      setTimeout(async () => {\r\n        await this._waitForAuthIfNeeded()\r\n        if (!this.isConnected()) {\r\n          this.connect()\r\n        }\r\n      }, CONNECTION_TIMEOUTS.RECONNECT_DELAY)\r\n    }, this.reconnectAfterMs)\r\n  }\r\n\r\n  /**\r\n   * Initialize client options with defaults\r\n   * @internal\r\n   */\r\n  private _initializeOptions(options?: RealtimeClientOptions): void {\r\n    // Set defaults\r\n    this.transport = options?.transport ?? null\r\n    this.timeout = options?.timeout ?? DEFAULT_TIMEOUT\r\n    this.heartbeatIntervalMs =\r\n      options?.heartbeatIntervalMs ?? CONNECTION_TIMEOUTS.HEARTBEAT_INTERVAL\r\n    this.worker = options?.worker ?? false\r\n    this.accessToken = options?.accessToken ?? null\r\n    this.heartbeatCallback = options?.heartbeatCallback ?? noop\r\n    // Handle special cases\r\n    if (options?.params) this.params = options.params\r\n    if (options?.logger) this.logger = options.logger\r\n    if (options?.logLevel || options?.log_level) {\r\n      this.logLevel = options.logLevel || options.log_level\r\n      this.params = { ...this.params, log_level: this.logLevel as string }\r\n    }\r\n\r\n    // Set up functions with defaults\r\n    this.reconnectAfterMs =\r\n      options?.reconnectAfterMs ??\r\n      ((tries: number) => {\r\n        return RECONNECT_INTERVALS[tries - 1] || DEFAULT_RECONNECT_FALLBACK\r\n      })\r\n\r\n    this.encode =\r\n      options?.encode ??\r\n      ((payload: JSON, callback: Function) => {\r\n        return callback(JSON.stringify(payload))\r\n      })\r\n\r\n    this.decode =\r\n      options?.decode ?? this.serializer.decode.bind(this.serializer)\r\n\r\n    // Handle worker setup\r\n    if (this.worker) {\r\n      if (typeof window !== 'undefined' && !window.Worker) {\r\n        throw new Error('Web Worker is not supported')\r\n      }\r\n      this.workerUrl = options?.workerUrl\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}